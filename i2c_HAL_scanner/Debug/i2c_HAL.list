
i2c_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e6c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002fa8  08002fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003008  08003008  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003010  08003010  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003014  08003014  00013014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000088  080030a0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080030a0  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009530  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001631  00000000  00000000  00029624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  0002ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ff  00000000  00000000  0002b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015823  00000000  00000000  0002bc3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b17b  00000000  00000000  00041462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086ad7  00000000  00000000  0004c5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a34  00000000  00000000  000d30b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d5ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000088 	.word	0x20000088
 8000158:	00000000 	.word	0x00000000
 800015c:	08002f90 	.word	0x08002f90

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000008c 	.word	0x2000008c
 8000178:	08002f90 	.word	0x08002f90

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <main>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);

int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
    uint8_t i = 0, ret;
 8000482:	2300      	movs	r3, #0
 8000484:	71fb      	strb	r3, [r7, #7]

    HAL_Init();
 8000486:	f000 faac 	bl	80009e2 <HAL_Init>
    SystemClock_Config();
 800048a:	f000 f857 	bl	800053c <SystemClock_Config>
    MX_GPIO_Init();
 800048e:	f000 f8fb 	bl	8000688 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000492:	f000 f8a1 	bl	80005d8 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8000496:	f000 f8cd 	bl	8000634 <MX_USART2_UART_Init>

    HAL_Delay(1000);
 800049a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800049e:	f000 fb0f 	bl	8000ac0 <HAL_Delay>

    /*-[ I2C Bus Scanning ]-*/
    HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 80004a2:	f242 7310 	movw	r3, #10000	; 0x2710
 80004a6:	221a      	movs	r2, #26
 80004a8:	491d      	ldr	r1, [pc, #116]	; (8000520 <main+0xa4>)
 80004aa:	481e      	ldr	r0, [pc, #120]	; (8000524 <main+0xa8>)
 80004ac:	f001 fee8 	bl	8002280 <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 80004b0:	2301      	movs	r3, #1
 80004b2:	71fb      	strb	r3, [r7, #7]
 80004b4:	e028      	b.n	8000508 <main+0x8c>
    {
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	b299      	uxth	r1, r3
 80004be:	2305      	movs	r3, #5
 80004c0:	2203      	movs	r2, #3
 80004c2:	4819      	ldr	r0, [pc, #100]	; (8000528 <main+0xac>)
 80004c4:	f000 feee 	bl	80012a4 <HAL_I2C_IsDeviceReady>
 80004c8:	4603      	mov	r3, r0
 80004ca:	71bb      	strb	r3, [r7, #6]
        if (ret != HAL_OK) /* No ACK Received At That Address */
 80004cc:	79bb      	ldrb	r3, [r7, #6]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d007      	beq.n	80004e2 <main+0x66>
        {
            HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 80004d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80004d6:	2204      	movs	r2, #4
 80004d8:	4914      	ldr	r1, [pc, #80]	; (800052c <main+0xb0>)
 80004da:	4812      	ldr	r0, [pc, #72]	; (8000524 <main+0xa8>)
 80004dc:	f001 fed0 	bl	8002280 <HAL_UART_Transmit>
 80004e0:	e00f      	b.n	8000502 <main+0x86>
        }
        else if(ret == HAL_OK)
 80004e2:	79bb      	ldrb	r3, [r7, #6]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d10c      	bne.n	8000502 <main+0x86>
        {
            sprintf(Buffer, "0x%X", i);
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	461a      	mov	r2, r3
 80004ec:	4910      	ldr	r1, [pc, #64]	; (8000530 <main+0xb4>)
 80004ee:	4811      	ldr	r0, [pc, #68]	; (8000534 <main+0xb8>)
 80004f0:	f002 f89c 	bl	800262c <siprintf>
            HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 80004f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80004f8:	2219      	movs	r2, #25
 80004fa:	490e      	ldr	r1, [pc, #56]	; (8000534 <main+0xb8>)
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <main+0xa8>)
 80004fe:	f001 febf 	bl	8002280 <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	3301      	adds	r3, #1
 8000506:	71fb      	strb	r3, [r7, #7]
 8000508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050c:	2b00      	cmp	r3, #0
 800050e:	dad2      	bge.n	80004b6 <main+0x3a>
        }
    }
    HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 8000510:	f242 7310 	movw	r3, #10000	; 0x2710
 8000514:	220b      	movs	r2, #11
 8000516:	4908      	ldr	r1, [pc, #32]	; (8000538 <main+0xbc>)
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <main+0xa8>)
 800051a:	f001 feb1 	bl	8002280 <HAL_UART_Transmit>
    /*--[ Scanning Done ]--*/

    while (1)
 800051e:	e7fe      	b.n	800051e <main+0xa2>
 8000520:	20000004 	.word	0x20000004
 8000524:	200000f8 	.word	0x200000f8
 8000528:	200000a4 	.word	0x200000a4
 800052c:	20000000 	.word	0x20000000
 8000530:	08002fa8 	.word	0x08002fa8
 8000534:	20000140 	.word	0x20000140
 8000538:	20000020 	.word	0x20000020

0800053c <SystemClock_Config>:
    {
    }
}

void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b092      	sub	sp, #72	; 0x48
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2234      	movs	r2, #52	; 0x34
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 f88e 	bl	800266c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <SystemClock_Config+0x98>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000566:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <SystemClock_Config+0x98>)
 8000568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800056c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2310      	movs	r3, #16
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057e:	2300      	movs	r3, #0
 8000580:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000582:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000588:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4618      	mov	r0, r3
 8000594:	f001 f82e 	bl	80015f4 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800059e:	f000 f8d9 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2303      	movs	r3, #3
 80005a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	2101      	movs	r1, #1
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fb4a 	bl	8001c54 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005c6:	f000 f8c5 	bl	8000754 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3748      	adds	r7, #72	; 0x48
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_I2C1_Init+0x50>)
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <MX_I2C1_Init+0x54>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_I2C1_Init+0x50>)
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <MX_I2C1_Init+0x58>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_I2C1_Init+0x50>)
 8000616:	f000 fd01 	bl	800101c <HAL_I2C_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000620:	f000 f898 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000a4 	.word	0x200000a4
 800062c:	40005400 	.word	0x40005400
 8000630:	000186a0 	.word	0x000186a0

08000634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_USART2_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800066c:	f001 fdb8 	bl	80021e0 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f86d 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000f8 	.word	0x200000f8
 8000684:	40004400 	.word	0x40004400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a29      	ldr	r2, [pc, #164]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b27      	ldr	r3, [pc, #156]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	4b24      	ldr	r3, [pc, #144]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a23      	ldr	r2, [pc, #140]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006bc:	f043 0320 	orr.w	r3, r3, #32
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 0320 	and.w	r3, r3, #32
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a17      	ldr	r2, [pc, #92]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_GPIO_Init+0xc0>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	4812      	ldr	r0, [pc, #72]	; (800074c <MX_GPIO_Init+0xc4>)
 8000704:	f000 fc72 	bl	8000fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	480c      	ldr	r0, [pc, #48]	; (8000750 <MX_GPIO_Init+0xc8>)
 8000720:	f000 fad4 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000724:	2320      	movs	r3, #32
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_GPIO_Init+0xc4>)
 800073c:	f000 fac6 	bl	8000ccc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	; 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40020000 	.word	0x40020000
 8000750:	40020800 	.word	0x40020800

08000754 <Error_Handler>:

void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_MspInit+0x5c>)
 8000768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <HAL_MspInit+0x5c>)
 800076c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000770:	6253      	str	r3, [r2, #36]	; 0x24
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_MspInit+0x5c>)
 8000774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x5c>)
 8000780:	6a1b      	ldr	r3, [r3, #32]
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <HAL_MspInit+0x5c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6213      	str	r3, [r2, #32]
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x5c>)
 800078c:	6a1b      	ldr	r3, [r3, #32]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_MspInit+0x5c>)
 8000798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <HAL_MspInit+0x5c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	6253      	str	r3, [r2, #36]	; 0x24
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_MspInit+0x5c>)
 80007a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ae:	2007      	movs	r0, #7
 80007b0:	f000 fa58 	bl	8000c64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800

080007c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_I2C_MspInit+0x7c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d128      	bne.n	8000834 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_I2C_MspInit+0x80>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <HAL_I2C_MspInit+0x80>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_I2C_MspInit+0x80>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000800:	2312      	movs	r3, #18
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800080c:	2304      	movs	r3, #4
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	480b      	ldr	r0, [pc, #44]	; (8000844 <HAL_I2C_MspInit+0x84>)
 8000818:	f000 fa58 	bl	8000ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_I2C_MspInit+0x80>)
 800081e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000820:	4a07      	ldr	r2, [pc, #28]	; (8000840 <HAL_I2C_MspInit+0x80>)
 8000822:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000826:	6253      	str	r3, [r2, #36]	; 0x24
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_I2C_MspInit+0x80>)
 800082a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40005400 	.word	0x40005400
 8000840:	40023800 	.word	0x40023800
 8000844:	40020400 	.word	0x40020400

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <HAL_UART_MspInit+0x7c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d127      	bne.n	80008ba <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_UART_MspInit+0x80>)
 800086c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <HAL_UART_MspInit+0x80>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	6253      	str	r3, [r2, #36]	; 0x24
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_UART_MspInit+0x80>)
 8000878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_UART_MspInit+0x80>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <HAL_UART_MspInit+0x80>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_UART_MspInit+0x80>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800089a:	230c      	movs	r3, #12
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <HAL_UART_MspInit+0x84>)
 80008b6:	f000 fa09 	bl	8000ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	; 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40004400 	.word	0x40004400
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 f8b7 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000928:	4a14      	ldr	r2, [pc, #80]	; (800097c <_sbrk+0x5c>)
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <_sbrk+0x60>)
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d102      	bne.n	8000942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <_sbrk+0x64>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <_sbrk+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	429a      	cmp	r2, r3
 800094e:	d207      	bcs.n	8000960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000950:	f001 fe94 	bl	800267c <__errno>
 8000954:	4603      	mov	r3, r0
 8000956:	220c      	movs	r2, #12
 8000958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800095a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800095e:	e009      	b.n	8000974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <_sbrk+0x64>)
 8000970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000972:	68fb      	ldr	r3, [r7, #12]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20014000 	.word	0x20014000
 8000980:	00000400 	.word	0x00000400
 8000984:	2000015c 	.word	0x2000015c
 8000988:	200002b0 	.word	0x200002b0

0800098c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000998:	f7ff fff8 	bl	800098c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800099e:	490c      	ldr	r1, [pc, #48]	; (80009d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009a0:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a09      	ldr	r2, [pc, #36]	; (80009d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009b4:	4c09      	ldr	r4, [pc, #36]	; (80009dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c2:	f001 fe61 	bl	8002688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c6:	f7ff fd59 	bl	800047c <main>
  bx lr
 80009ca:	4770      	bx	lr
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80009d4:	08003018 	.word	0x08003018
  ldr r2, =_sbss
 80009d8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80009dc:	200002ac 	.word	0x200002ac

080009e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_IRQHandler>

080009e2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ec:	2003      	movs	r0, #3
 80009ee:	f000 f939 	bl	8000c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f80e 	bl	8000a14 <HAL_InitTick>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	e001      	b.n	8000a08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a04:	f7ff feac 	bl	8000760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_InitTick+0x68>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d022      	beq.n	8000a6e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_InitTick+0x6c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_InitTick+0x68>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 f938 	bl	8000cb2 <HAL_SYSTICK_Config>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10f      	bne.n	8000a68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b0f      	cmp	r3, #15
 8000a4c:	d809      	bhi.n	8000a62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a56:	f000 f910 	bl	8000c7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_InitTick+0x70>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	e007      	b.n	8000a72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	e004      	b.n	8000a72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e001      	b.n	8000a72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000034 	.word	0x20000034
 8000a80:	2000002c 	.word	0x2000002c
 8000a84:	20000030 	.word	0x20000030

08000a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_IncTick+0x1c>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a03      	ldr	r2, [pc, #12]	; (8000aa4 <HAL_IncTick+0x1c>)
 8000a98:	6013      	str	r3, [r2, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000160 	.word	0x20000160
 8000aa8:	20000034 	.word	0x20000034

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <HAL_GetTick+0x10>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	20000160 	.word	0x20000160

08000ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	f7ff fff0 	bl	8000aac <HAL_GetTick>
 8000acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ad8:	d004      	beq.n	8000ae4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_Delay+0x40>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ae4:	bf00      	nop
 8000ae6:	f7ff ffe1 	bl	8000aac <HAL_GetTick>
 8000aea:	4602      	mov	r2, r0
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d8f7      	bhi.n	8000ae6 <HAL_Delay+0x26>
  {
  }
}
 8000af6:	bf00      	nop
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000034 	.word	0x20000034

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f1c3 0307 	rsb	r3, r3, #7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	bf28      	it	cs
 8000bda:	2304      	movcs	r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3304      	adds	r3, #4
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d902      	bls.n	8000bec <NVIC_EncodePriority+0x30>
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3b03      	subs	r3, #3
 8000bea:	e000      	b.n	8000bee <NVIC_EncodePriority+0x32>
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43d9      	mvns	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	4313      	orrs	r3, r2
         );
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c30:	d301      	bcc.n	8000c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00f      	b.n	8000c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <SysTick_Config+0x40>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3e:	210f      	movs	r1, #15
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c44:	f7ff ff90 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <SysTick_Config+0x40>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SysTick_Config+0x40>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	e000e010 	.word	0xe000e010

08000c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ff49 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c8c:	f7ff ff5e 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	68b9      	ldr	r1, [r7, #8]
 8000c96:	6978      	ldr	r0, [r7, #20]
 8000c98:	f7ff ff90 	bl	8000bbc <NVIC_EncodePriority>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff5f 	bl	8000b68 <__NVIC_SetPriority>
}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ffb0 	bl	8000c20 <SysTick_Config>
 8000cc0:	4603      	mov	r3, r0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b087      	sub	sp, #28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ce2:	e160      	b.n	8000fa6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 8152 	beq.w	8000fa0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d005      	beq.n	8000d14 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 0201 	and.w	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d017      	beq.n	8000db2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d123      	bne.n	8000e06 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	691a      	ldr	r2, [r3, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	6939      	ldr	r1, [r7, #16]
 8000e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0203 	and.w	r2, r3, #3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 80ac 	beq.w	8000fa0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e48:	4b5e      	ldr	r3, [pc, #376]	; (8000fc4 <HAL_GPIO_Init+0x2f8>)
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	4a5d      	ldr	r2, [pc, #372]	; (8000fc4 <HAL_GPIO_Init+0x2f8>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6213      	str	r3, [r2, #32]
 8000e54:	4b5b      	ldr	r3, [pc, #364]	; (8000fc4 <HAL_GPIO_Init+0x2f8>)
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e60:	4a59      	ldr	r2, [pc, #356]	; (8000fc8 <HAL_GPIO_Init+0x2fc>)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a51      	ldr	r2, [pc, #324]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d025      	beq.n	8000ed8 <HAL_GPIO_Init+0x20c>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a50      	ldr	r2, [pc, #320]	; (8000fd0 <HAL_GPIO_Init+0x304>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d01f      	beq.n	8000ed4 <HAL_GPIO_Init+0x208>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a4f      	ldr	r2, [pc, #316]	; (8000fd4 <HAL_GPIO_Init+0x308>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d019      	beq.n	8000ed0 <HAL_GPIO_Init+0x204>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a4e      	ldr	r2, [pc, #312]	; (8000fd8 <HAL_GPIO_Init+0x30c>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d013      	beq.n	8000ecc <HAL_GPIO_Init+0x200>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a4d      	ldr	r2, [pc, #308]	; (8000fdc <HAL_GPIO_Init+0x310>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d00d      	beq.n	8000ec8 <HAL_GPIO_Init+0x1fc>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a4c      	ldr	r2, [pc, #304]	; (8000fe0 <HAL_GPIO_Init+0x314>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d007      	beq.n	8000ec4 <HAL_GPIO_Init+0x1f8>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a4b      	ldr	r2, [pc, #300]	; (8000fe4 <HAL_GPIO_Init+0x318>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d101      	bne.n	8000ec0 <HAL_GPIO_Init+0x1f4>
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	e00c      	b.n	8000eda <HAL_GPIO_Init+0x20e>
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	e00a      	b.n	8000eda <HAL_GPIO_Init+0x20e>
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	e008      	b.n	8000eda <HAL_GPIO_Init+0x20e>
 8000ec8:	2304      	movs	r3, #4
 8000eca:	e006      	b.n	8000eda <HAL_GPIO_Init+0x20e>
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e004      	b.n	8000eda <HAL_GPIO_Init+0x20e>
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	e002      	b.n	8000eda <HAL_GPIO_Init+0x20e>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e000      	b.n	8000eda <HAL_GPIO_Init+0x20e>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	f002 0203 	and.w	r2, r2, #3
 8000ee0:	0092      	lsls	r2, r2, #2
 8000ee2:	4093      	lsls	r3, r2
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000eea:	4937      	ldr	r1, [pc, #220]	; (8000fc8 <HAL_GPIO_Init+0x2fc>)
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef8:	4b3b      	ldr	r3, [pc, #236]	; (8000fe8 <HAL_GPIO_Init+0x31c>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f1c:	4a32      	ldr	r2, [pc, #200]	; (8000fe8 <HAL_GPIO_Init+0x31c>)
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f22:	4b31      	ldr	r3, [pc, #196]	; (8000fe8 <HAL_GPIO_Init+0x31c>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f46:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <HAL_GPIO_Init+0x31c>)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f4c:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <HAL_GPIO_Init+0x31c>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_GPIO_Init+0x31c>)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <HAL_GPIO_Init+0x31c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f9a:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <HAL_GPIO_Init+0x31c>)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f47f ae97 	bne.w	8000ce4 <HAL_GPIO_Init+0x18>
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	371c      	adds	r7, #28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40021400 	.word	0x40021400
 8000fe4:	40021800 	.word	0x40021800
 8000fe8:	40010400 	.word	0x40010400

08000fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ffc:	787b      	ldrb	r3, [r7, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001008:	e003      	b.n	8001012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e12b      	b.n	8001286 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d106      	bne.n	8001048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fbbc 	bl	80007c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2224      	movs	r2, #36	; 0x24
 800104c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0201 	bic.w	r2, r2, #1
 800105e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800106e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800107e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001080:	f001 f826 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8001084:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	4a81      	ldr	r2, [pc, #516]	; (8001290 <HAL_I2C_Init+0x274>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d807      	bhi.n	80010a0 <HAL_I2C_Init+0x84>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4a80      	ldr	r2, [pc, #512]	; (8001294 <HAL_I2C_Init+0x278>)
 8001094:	4293      	cmp	r3, r2
 8001096:	bf94      	ite	ls
 8001098:	2301      	movls	r3, #1
 800109a:	2300      	movhi	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	e006      	b.n	80010ae <HAL_I2C_Init+0x92>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4a7d      	ldr	r2, [pc, #500]	; (8001298 <HAL_I2C_Init+0x27c>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	bf94      	ite	ls
 80010a8:	2301      	movls	r3, #1
 80010aa:	2300      	movhi	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e0e7      	b.n	8001286 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4a78      	ldr	r2, [pc, #480]	; (800129c <HAL_I2C_Init+0x280>)
 80010ba:	fba2 2303 	umull	r2, r3, r2, r3
 80010be:	0c9b      	lsrs	r3, r3, #18
 80010c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	4a6a      	ldr	r2, [pc, #424]	; (8001290 <HAL_I2C_Init+0x274>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d802      	bhi.n	80010f0 <HAL_I2C_Init+0xd4>
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3301      	adds	r3, #1
 80010ee:	e009      	b.n	8001104 <HAL_I2C_Init+0xe8>
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	4a69      	ldr	r2, [pc, #420]	; (80012a0 <HAL_I2C_Init+0x284>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	099b      	lsrs	r3, r3, #6
 8001102:	3301      	adds	r3, #1
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	430b      	orrs	r3, r1
 800110a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001116:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	495c      	ldr	r1, [pc, #368]	; (8001290 <HAL_I2C_Init+0x274>)
 8001120:	428b      	cmp	r3, r1
 8001122:	d819      	bhi.n	8001158 <HAL_I2C_Init+0x13c>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	1e59      	subs	r1, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001132:	1c59      	adds	r1, r3, #1
 8001134:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001138:	400b      	ands	r3, r1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00a      	beq.n	8001154 <HAL_I2C_Init+0x138>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1e59      	subs	r1, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fbb1 f3f3 	udiv	r3, r1, r3
 800114c:	3301      	adds	r3, #1
 800114e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001152:	e051      	b.n	80011f8 <HAL_I2C_Init+0x1dc>
 8001154:	2304      	movs	r3, #4
 8001156:	e04f      	b.n	80011f8 <HAL_I2C_Init+0x1dc>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d111      	bne.n	8001184 <HAL_I2C_Init+0x168>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	1e58      	subs	r0, r3, #1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6859      	ldr	r1, [r3, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	440b      	add	r3, r1
 800116e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001172:	3301      	adds	r3, #1
 8001174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001178:	2b00      	cmp	r3, #0
 800117a:	bf0c      	ite	eq
 800117c:	2301      	moveq	r3, #1
 800117e:	2300      	movne	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	e012      	b.n	80011aa <HAL_I2C_Init+0x18e>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	1e58      	subs	r0, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6859      	ldr	r1, [r3, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	0099      	lsls	r1, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	fbb0 f3f3 	udiv	r3, r0, r3
 800119a:	3301      	adds	r3, #1
 800119c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf0c      	ite	eq
 80011a4:	2301      	moveq	r3, #1
 80011a6:	2300      	movne	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_I2C_Init+0x196>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e022      	b.n	80011f8 <HAL_I2C_Init+0x1dc>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10e      	bne.n	80011d8 <HAL_I2C_Init+0x1bc>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1e58      	subs	r0, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6859      	ldr	r1, [r3, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	440b      	add	r3, r1
 80011c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80011cc:	3301      	adds	r3, #1
 80011ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d6:	e00f      	b.n	80011f8 <HAL_I2C_Init+0x1dc>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	1e58      	subs	r0, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6859      	ldr	r1, [r3, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	0099      	lsls	r1, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ee:	3301      	adds	r3, #1
 80011f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	6809      	ldr	r1, [r1, #0]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69da      	ldr	r2, [r3, #28]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001226:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6911      	ldr	r1, [r2, #16]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68d2      	ldr	r2, [r2, #12]
 8001232:	4311      	orrs	r1, r2
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	430b      	orrs	r3, r1
 800123a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2220      	movs	r2, #32
 8001272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	000186a0 	.word	0x000186a0
 8001294:	001e847f 	.word	0x001e847f
 8001298:	003d08ff 	.word	0x003d08ff
 800129c:	431bde83 	.word	0x431bde83
 80012a0:	10624dd3 	.word	0x10624dd3

080012a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	460b      	mov	r3, r1
 80012b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff fbfa 	bl	8000aac <HAL_GetTick>
 80012b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b20      	cmp	r3, #32
 80012c8:	f040 8111 	bne.w	80014ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2319      	movs	r3, #25
 80012d2:	2201      	movs	r2, #1
 80012d4:	4988      	ldr	r1, [pc, #544]	; (80014f8 <HAL_I2C_IsDeviceReady+0x254>)
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 f912 	bl	8001500 <I2C_WaitOnFlagUntilTimeout>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80012e2:	2302      	movs	r3, #2
 80012e4:	e104      	b.n	80014f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_I2C_IsDeviceReady+0x50>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e0fd      	b.n	80014f0 <HAL_I2C_IsDeviceReady+0x24c>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b01      	cmp	r3, #1
 8001308:	d007      	beq.n	800131a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f042 0201 	orr.w	r2, r2, #1
 8001318:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001328:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2224      	movs	r2, #36	; 0x24
 800132e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4a70      	ldr	r2, [pc, #448]	; (80014fc <HAL_I2C_IsDeviceReady+0x258>)
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800134c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2200      	movs	r2, #0
 8001356:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 f8d0 	bl	8001500 <I2C_WaitOnFlagUntilTimeout>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00d      	beq.n	8001382 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001374:	d103      	bne.n	800137e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e0b6      	b.n	80014f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001382:	897b      	ldrh	r3, [r7, #10]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001390:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001392:	f7ff fb8b 	bl	8000aac <HAL_GetTick>
 8001396:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	bf0c      	ite	eq
 80013a6:	2301      	moveq	r3, #1
 80013a8:	2300      	movne	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013bc:	bf0c      	ite	eq
 80013be:	2301      	moveq	r3, #1
 80013c0:	2300      	movne	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80013c6:	e025      	b.n	8001414 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013c8:	f7ff fb70 	bl	8000aac <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d302      	bcc.n	80013de <HAL_I2C_IsDeviceReady+0x13a>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d103      	bne.n	80013e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	22a0      	movs	r2, #160	; 0xa0
 80013e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	bf0c      	ite	eq
 80013f4:	2301      	moveq	r3, #1
 80013f6:	2300      	movne	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2ba0      	cmp	r3, #160	; 0xa0
 800141e:	d005      	beq.n	800142c <HAL_I2C_IsDeviceReady+0x188>
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <HAL_I2C_IsDeviceReady+0x188>
 8001426:	7dbb      	ldrb	r3, [r7, #22]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0cd      	beq.n	80013c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2220      	movs	r2, #32
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b02      	cmp	r3, #2
 8001440:	d129      	bne.n	8001496 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001450:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2319      	movs	r3, #25
 800146e:	2201      	movs	r2, #1
 8001470:	4921      	ldr	r1, [pc, #132]	; (80014f8 <HAL_I2C_IsDeviceReady+0x254>)
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 f844 	bl	8001500 <I2C_WaitOnFlagUntilTimeout>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e036      	b.n	80014f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2220      	movs	r2, #32
 8001486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e02c      	b.n	80014f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2319      	movs	r3, #25
 80014b6:	2201      	movs	r2, #1
 80014b8:	490f      	ldr	r1, [pc, #60]	; (80014f8 <HAL_I2C_IsDeviceReady+0x254>)
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 f820 	bl	8001500 <I2C_WaitOnFlagUntilTimeout>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e012      	b.n	80014f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f4ff af32 	bcc.w	800133e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2220      	movs	r2, #32
 80014de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80014ee:	2302      	movs	r3, #2
  }
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	00100002 	.word	0x00100002
 80014fc:	ffff0000 	.word	0xffff0000

08001500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	4613      	mov	r3, r2
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001510:	e048      	b.n	80015a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001518:	d044      	beq.n	80015a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800151a:	f7ff fac7 	bl	8000aac <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d302      	bcc.n	8001530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d139      	bne.n	80015a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	0c1b      	lsrs	r3, r3, #16
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d10d      	bne.n	8001556 <I2C_WaitOnFlagUntilTimeout+0x56>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	43da      	mvns	r2, r3
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	4013      	ands	r3, r2
 8001546:	b29b      	uxth	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf0c      	ite	eq
 800154c:	2301      	moveq	r3, #1
 800154e:	2300      	movne	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	e00c      	b.n	8001570 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	43da      	mvns	r2, r3
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	4013      	ands	r3, r2
 8001562:	b29b      	uxth	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf0c      	ite	eq
 8001568:	2301      	moveq	r3, #1
 800156a:	2300      	movne	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	429a      	cmp	r2, r3
 8001574:	d116      	bne.n	80015a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f043 0220 	orr.w	r2, r3, #32
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e023      	b.n	80015ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	0c1b      	lsrs	r3, r3, #16
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d10d      	bne.n	80015ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	43da      	mvns	r2, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	4013      	ands	r3, r2
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	e00c      	b.n	80015e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	43da      	mvns	r2, r3
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	4013      	ands	r3, r2
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf0c      	ite	eq
 80015dc:	2301      	moveq	r3, #1
 80015de:	2300      	movne	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d093      	beq.n	8001512 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e31d      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001606:	4b94      	ldr	r3, [pc, #592]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001610:	4b91      	ldr	r3, [pc, #580]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d07b      	beq.n	800171e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	2b08      	cmp	r3, #8
 800162a:	d006      	beq.n	800163a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2b0c      	cmp	r3, #12
 8001630:	d10f      	bne.n	8001652 <HAL_RCC_OscConfig+0x5e>
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001638:	d10b      	bne.n	8001652 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163a:	4b87      	ldr	r3, [pc, #540]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d06a      	beq.n	800171c <HAL_RCC_OscConfig+0x128>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d166      	bne.n	800171c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e2f7      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d106      	bne.n	8001668 <HAL_RCC_OscConfig+0x74>
 800165a:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7e      	ldr	r2, [pc, #504]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e02d      	b.n	80016c4 <HAL_RCC_OscConfig+0xd0>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10c      	bne.n	800168a <HAL_RCC_OscConfig+0x96>
 8001670:	4b79      	ldr	r3, [pc, #484]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a78      	ldr	r2, [pc, #480]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b76      	ldr	r3, [pc, #472]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a75      	ldr	r2, [pc, #468]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e01c      	b.n	80016c4 <HAL_RCC_OscConfig+0xd0>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b05      	cmp	r3, #5
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0xb8>
 8001692:	4b71      	ldr	r3, [pc, #452]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a70      	ldr	r2, [pc, #448]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b6e      	ldr	r3, [pc, #440]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6d      	ldr	r2, [pc, #436]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0xd0>
 80016ac:	4b6a      	ldr	r3, [pc, #424]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a69      	ldr	r2, [pc, #420]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b67      	ldr	r3, [pc, #412]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a66      	ldr	r2, [pc, #408]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff f9ee 	bl	8000aac <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff f9ea 	bl	8000aac <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e2ad      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016e6:	4b5c      	ldr	r3, [pc, #368]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0xe0>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff f9da 	bl	8000aac <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff f9d6 	bl	8000aac <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e299      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800170e:	4b52      	ldr	r3, [pc, #328]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x108>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d05a      	beq.n	80017e0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b04      	cmp	r3, #4
 800172e:	d005      	beq.n	800173c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d119      	bne.n	800176a <HAL_RCC_OscConfig+0x176>
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d116      	bne.n	800176a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173c:	4b46      	ldr	r3, [pc, #280]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_OscConfig+0x160>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d001      	beq.n	8001754 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e276      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b40      	ldr	r3, [pc, #256]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	493d      	ldr	r1, [pc, #244]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001768:	e03a      	b.n	80017e0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d020      	beq.n	80017b4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <HAL_RCC_OscConfig+0x268>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff f998 	bl	8000aac <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001780:	f7ff f994 	bl	8000aac <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e257      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001792:	4b31      	ldr	r3, [pc, #196]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179e:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	492a      	ldr	r1, [pc, #168]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
 80017b2:	e015      	b.n	80017e0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <HAL_RCC_OscConfig+0x268>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff f977 	bl	8000aac <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff f973 	bl	8000aac <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e236      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80b8 	beq.w	800195e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d170      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_OscConfig+0x218>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e21a      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1a      	ldr	r2, [r3, #32]
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001818:	429a      	cmp	r2, r3
 800181a:	d921      	bls.n	8001860 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fc7d 	bl	8002120 <RCC_SetFlashLatencyFromMSIRange>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e208      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4906      	ldr	r1, [pc, #24]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	061b      	lsls	r3, r3, #24
 8001850:	4901      	ldr	r1, [pc, #4]	; (8001858 <HAL_RCC_OscConfig+0x264>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]
 8001856:	e020      	b.n	800189a <HAL_RCC_OscConfig+0x2a6>
 8001858:	40023800 	.word	0x40023800
 800185c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001860:	4b99      	ldr	r3, [pc, #612]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4996      	ldr	r1, [pc, #600]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001872:	4b95      	ldr	r3, [pc, #596]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	061b      	lsls	r3, r3, #24
 8001880:	4991      	ldr	r1, [pc, #580]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fc48 	bl	8002120 <RCC_SetFlashLatencyFromMSIRange>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e1d3      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	0b5b      	lsrs	r3, r3, #13
 80018a0:	3301      	adds	r3, #1
 80018a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80018aa:	4a87      	ldr	r2, [pc, #540]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 80018ac:	6892      	ldr	r2, [r2, #8]
 80018ae:	0912      	lsrs	r2, r2, #4
 80018b0:	f002 020f 	and.w	r2, r2, #15
 80018b4:	4985      	ldr	r1, [pc, #532]	; (8001acc <HAL_RCC_OscConfig+0x4d8>)
 80018b6:	5c8a      	ldrb	r2, [r1, r2]
 80018b8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018ba:	4a85      	ldr	r2, [pc, #532]	; (8001ad0 <HAL_RCC_OscConfig+0x4dc>)
 80018bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018be:	4b85      	ldr	r3, [pc, #532]	; (8001ad4 <HAL_RCC_OscConfig+0x4e0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f8a6 	bl	8000a14 <HAL_InitTick>
 80018c8:	4603      	mov	r3, r0
 80018ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d045      	beq.n	800195e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	e1b5      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d029      	beq.n	8001932 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018de:	4b7e      	ldr	r3, [pc, #504]	; (8001ad8 <HAL_RCC_OscConfig+0x4e4>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff f8e2 	bl	8000aac <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ec:	f7ff f8de 	bl	8000aac <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e1a1      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018fe:	4b72      	ldr	r3, [pc, #456]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800190a:	4b6f      	ldr	r3, [pc, #444]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	496c      	ldr	r1, [pc, #432]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800191c:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	061b      	lsls	r3, r3, #24
 800192a:	4967      	ldr	r1, [pc, #412]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
 8001930:	e015      	b.n	800195e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001932:	4b69      	ldr	r3, [pc, #420]	; (8001ad8 <HAL_RCC_OscConfig+0x4e4>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff f8b8 	bl	8000aac <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001940:	f7ff f8b4 	bl	8000aac <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e177      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001952:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d030      	beq.n	80019cc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d016      	beq.n	80019a0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001972:	4b5a      	ldr	r3, [pc, #360]	; (8001adc <HAL_RCC_OscConfig+0x4e8>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001978:	f7ff f898 	bl	8000aac <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001980:	f7ff f894 	bl	8000aac <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e157      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001992:	4b4d      	ldr	r3, [pc, #308]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x38c>
 800199e:	e015      	b.n	80019cc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a0:	4b4e      	ldr	r3, [pc, #312]	; (8001adc <HAL_RCC_OscConfig+0x4e8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a6:	f7ff f881 	bl	8000aac <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ae:	f7ff f87d 	bl	8000aac <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e140      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019c0:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 80019c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f0      	bne.n	80019ae <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80b5 	beq.w	8001b44 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019de:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10d      	bne.n	8001a06 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	4a36      	ldr	r2, [pc, #216]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	6253      	str	r3, [r2, #36]	; 0x24
 80019f6:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a02:	2301      	movs	r3, #1
 8001a04:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a06:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <HAL_RCC_OscConfig+0x4ec>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d118      	bne.n	8001a44 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a12:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <HAL_RCC_OscConfig+0x4ec>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a32      	ldr	r2, [pc, #200]	; (8001ae0 <HAL_RCC_OscConfig+0x4ec>)
 8001a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff f845 	bl	8000aac <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a26:	f7ff f841 	bl	8000aac <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b64      	cmp	r3, #100	; 0x64
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e104      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <HAL_RCC_OscConfig+0x4ec>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x466>
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a50:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a56:	6353      	str	r3, [r2, #52]	; 0x34
 8001a58:	e02d      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4c2>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x488>
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a66:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a6c:	6353      	str	r3, [r2, #52]	; 0x34
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a72:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a78:	6353      	str	r3, [r2, #52]	; 0x34
 8001a7a:	e01c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4c2>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d10c      	bne.n	8001a9e <HAL_RCC_OscConfig+0x4aa>
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a8e:	6353      	str	r3, [r2, #52]	; 0x34
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a94:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9a:	6353      	str	r3, [r2, #52]	; 0x34
 8001a9c:	e00b      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4c2>
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aa8:	6353      	str	r3, [r2, #52]	; 0x34
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aae:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <HAL_RCC_OscConfig+0x4d4>)
 8001ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ab4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d024      	beq.n	8001b08 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7fe fff5 	bl	8000aac <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ac4:	e019      	b.n	8001afa <HAL_RCC_OscConfig+0x506>
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	08002fbc 	.word	0x08002fbc
 8001ad0:	2000002c 	.word	0x2000002c
 8001ad4:	20000030 	.word	0x20000030
 8001ad8:	42470020 	.word	0x42470020
 8001adc:	42470680 	.word	0x42470680
 8001ae0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7fe ffe2 	bl	8000aac <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e0a3      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001afa:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <HAL_RCC_OscConfig+0x658>)
 8001afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0ee      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x4f0>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7fe ffd0 	bl	8000aac <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7fe ffcc 	bl	8000aac <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e08d      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <HAL_RCC_OscConfig+0x658>)
 8001b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1ee      	bne.n	8001b10 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b32:	7ffb      	ldrb	r3, [r7, #31]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <HAL_RCC_OscConfig+0x658>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	4a43      	ldr	r2, [pc, #268]	; (8001c4c <HAL_RCC_OscConfig+0x658>)
 8001b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d079      	beq.n	8001c40 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d056      	beq.n	8001c00 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d13b      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_RCC_OscConfig+0x65c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7fe ffa4 	bl	8000aac <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b68:	f7fe ffa0 	bl	8000aac <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e063      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_OscConfig+0x658>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b86:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_RCC_OscConfig+0x658>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	4319      	orrs	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	492b      	ldr	r1, [pc, #172]	; (8001c4c <HAL_RCC_OscConfig+0x658>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_RCC_OscConfig+0x65c>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7fe ff7f 	bl	8000aac <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7fe ff7b 	bl	8000aac <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e03e      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_RCC_OscConfig+0x658>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x5be>
 8001bd0:	e036      	b.n	8001c40 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <HAL_RCC_OscConfig+0x65c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7fe ff68 	bl	8000aac <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be0:	f7fe ff64 	bl	8000aac <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e027      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <HAL_RCC_OscConfig+0x658>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5ec>
 8001bfe:	e01f      	b.n	8001c40 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e01a      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_RCC_OscConfig+0x658>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d10d      	bne.n	8001c3c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d106      	bne.n	8001c3c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	42470060 	.word	0x42470060

08001c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e11a      	b.n	8001e9e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c68:	4b8f      	ldr	r3, [pc, #572]	; (8001ea8 <HAL_RCC_ClockConfig+0x254>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d919      	bls.n	8001caa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d105      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x34>
 8001c7c:	4b8a      	ldr	r3, [pc, #552]	; (8001ea8 <HAL_RCC_ClockConfig+0x254>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a89      	ldr	r2, [pc, #548]	; (8001ea8 <HAL_RCC_ClockConfig+0x254>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b87      	ldr	r3, [pc, #540]	; (8001ea8 <HAL_RCC_ClockConfig+0x254>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 0201 	bic.w	r2, r3, #1
 8001c90:	4985      	ldr	r1, [pc, #532]	; (8001ea8 <HAL_RCC_ClockConfig+0x254>)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c98:	4b83      	ldr	r3, [pc, #524]	; (8001ea8 <HAL_RCC_ClockConfig+0x254>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0f9      	b.n	8001e9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb6:	4b7d      	ldr	r3, [pc, #500]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	497a      	ldr	r1, [pc, #488]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 808e 	beq.w	8001df2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cde:	4b73      	ldr	r3, [pc, #460]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d121      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0d7      	b.n	8001e9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cf6:	4b6d      	ldr	r3, [pc, #436]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d115      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0cb      	b.n	8001e9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d0e:	4b67      	ldr	r3, [pc, #412]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e0bf      	b.n	8001e9e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d1e:	4b63      	ldr	r3, [pc, #396]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0b7      	b.n	8001e9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f023 0203 	bic.w	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	495c      	ldr	r1, [pc, #368]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d40:	f7fe feb4 	bl	8000aac <HAL_GetTick>
 8001d44:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d112      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7fe feac 	bl	8000aac <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e09b      	b.n	8001e9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d66:	4b51      	ldr	r3, [pc, #324]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d1ee      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xfc>
 8001d72:	e03e      	b.n	8001df2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d112      	bne.n	8001da2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7e:	f7fe fe95 	bl	8000aac <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e084      	b.n	8001e9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d94:	4b45      	ldr	r3, [pc, #276]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b0c      	cmp	r3, #12
 8001d9e:	d1ee      	bne.n	8001d7e <HAL_RCC_ClockConfig+0x12a>
 8001da0:	e027      	b.n	8001df2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d11d      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dac:	f7fe fe7e 	bl	8000aac <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e06d      	b.n	8001e9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d1ee      	bne.n	8001dac <HAL_RCC_ClockConfig+0x158>
 8001dce:	e010      	b.n	8001df2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7fe fe6c 	bl	8000aac <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e05b      	b.n	8001e9e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001de6:	4b31      	ldr	r3, [pc, #196]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ee      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <HAL_RCC_ClockConfig+0x254>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d219      	bcs.n	8001e34 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d105      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x1be>
 8001e06:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <HAL_RCC_ClockConfig+0x254>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <HAL_RCC_ClockConfig+0x254>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <HAL_RCC_ClockConfig+0x254>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 0201 	bic.w	r2, r3, #1
 8001e1a:	4923      	ldr	r1, [pc, #140]	; (8001ea8 <HAL_RCC_ClockConfig+0x254>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_RCC_ClockConfig+0x254>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e034      	b.n	8001e9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d008      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4917      	ldr	r1, [pc, #92]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d009      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	490f      	ldr	r1, [pc, #60]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e72:	f000 f823 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8001e76:	4602      	mov	r2, r0
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_RCC_ClockConfig+0x258>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	490b      	ldr	r1, [pc, #44]	; (8001eb0 <HAL_RCC_ClockConfig+0x25c>)
 8001e84:	5ccb      	ldrb	r3, [r1, r3]
 8001e86:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_RCC_ClockConfig+0x260>)
 8001e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_RCC_ClockConfig+0x264>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fdbe 	bl	8000a14 <HAL_InitTick>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e9c:	7afb      	ldrb	r3, [r7, #11]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	08002fbc 	.word	0x08002fbc
 8001eb4:	2000002c 	.word	0x2000002c
 8001eb8:	20000030 	.word	0x20000030

08001ebc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ec0:	b092      	sub	sp, #72	; 0x48
 8001ec2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ec4:	4b79      	ldr	r3, [pc, #484]	; (80020ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b0c      	cmp	r3, #12
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	f200 80d5 	bhi.w	8002084 <HAL_RCC_GetSysClockFreq+0x1c8>
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d002      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x28>
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d003      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0x2e>
 8001ee2:	e0cf      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ee4:	4b72      	ldr	r3, [pc, #456]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001ee6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001ee8:	e0da      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eea:	4b72      	ldr	r3, [pc, #456]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001eec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001eee:	e0d7      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef2:	0c9b      	lsrs	r3, r3, #18
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	4b6f      	ldr	r3, [pc, #444]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001efa:	5c9b      	ldrb	r3, [r3, r2]
 8001efc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f00:	0d9b      	lsrs	r3, r3, #22
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	3301      	adds	r3, #1
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f0a:	4b68      	ldr	r3, [pc, #416]	; (80020ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d05d      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4604      	mov	r4, r0
 8001f20:	460d      	mov	r5, r1
 8001f22:	4622      	mov	r2, r4
 8001f24:	462b      	mov	r3, r5
 8001f26:	f04f 0000 	mov.w	r0, #0
 8001f2a:	f04f 0100 	mov.w	r1, #0
 8001f2e:	0159      	lsls	r1, r3, #5
 8001f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f34:	0150      	lsls	r0, r2, #5
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	1a51      	subs	r1, r2, r1
 8001f3e:	6139      	str	r1, [r7, #16]
 8001f40:	4629      	mov	r1, r5
 8001f42:	eb63 0301 	sbc.w	r3, r3, r1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f54:	4659      	mov	r1, fp
 8001f56:	018b      	lsls	r3, r1, #6
 8001f58:	4651      	mov	r1, sl
 8001f5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f5e:	4651      	mov	r1, sl
 8001f60:	018a      	lsls	r2, r1, #6
 8001f62:	46d4      	mov	ip, sl
 8001f64:	ebb2 080c 	subs.w	r8, r2, ip
 8001f68:	4659      	mov	r1, fp
 8001f6a:	eb63 0901 	sbc.w	r9, r3, r1
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f82:	4690      	mov	r8, r2
 8001f84:	4699      	mov	r9, r3
 8001f86:	4623      	mov	r3, r4
 8001f88:	eb18 0303 	adds.w	r3, r8, r3
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	462b      	mov	r3, r5
 8001f90:	eb49 0303 	adc.w	r3, r9, r3
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	024b      	lsls	r3, r1, #9
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	4629      	mov	r1, r5
 8001faa:	4604      	mov	r4, r0
 8001fac:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	024a      	lsls	r2, r1, #9
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fba:	2200      	movs	r2, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fc4:	f7fe f8da 	bl	800017c <__aeabi_uldivmod>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4613      	mov	r3, r2
 8001fce:	647b      	str	r3, [r7, #68]	; 0x44
 8001fd0:	e055      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	623b      	str	r3, [r7, #32]
 8001fd8:	627a      	str	r2, [r7, #36]	; 0x24
 8001fda:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fde:	4642      	mov	r2, r8
 8001fe0:	464b      	mov	r3, r9
 8001fe2:	f04f 0000 	mov.w	r0, #0
 8001fe6:	f04f 0100 	mov.w	r1, #0
 8001fea:	0159      	lsls	r1, r3, #5
 8001fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ff0:	0150      	lsls	r0, r2, #5
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	46c4      	mov	ip, r8
 8001ff8:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001ffc:	4640      	mov	r0, r8
 8001ffe:	4649      	mov	r1, r9
 8002000:	468c      	mov	ip, r1
 8002002:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002012:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002016:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800201a:	ebb2 040a 	subs.w	r4, r2, sl
 800201e:	eb63 050b 	sbc.w	r5, r3, fp
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	00eb      	lsls	r3, r5, #3
 800202c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002030:	00e2      	lsls	r2, r4, #3
 8002032:	4614      	mov	r4, r2
 8002034:	461d      	mov	r5, r3
 8002036:	4603      	mov	r3, r0
 8002038:	18e3      	adds	r3, r4, r3
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	460b      	mov	r3, r1
 800203e:	eb45 0303 	adc.w	r3, r5, r3
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002050:	4629      	mov	r1, r5
 8002052:	028b      	lsls	r3, r1, #10
 8002054:	4620      	mov	r0, r4
 8002056:	4629      	mov	r1, r5
 8002058:	4604      	mov	r4, r0
 800205a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800205e:	4601      	mov	r1, r0
 8002060:	028a      	lsls	r2, r1, #10
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002068:	2200      	movs	r2, #0
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	61fa      	str	r2, [r7, #28]
 800206e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002072:	f7fe f883 	bl	800017c <__aeabi_uldivmod>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4613      	mov	r3, r2
 800207c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800207e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002080:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002082:	e00d      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	0b5b      	lsrs	r3, r3, #13
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002092:	3301      	adds	r3, #1
 8002094:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800209e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3748      	adds	r7, #72	; 0x48
 80020a6:	46bd      	mov	sp, r7
 80020a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ac:	40023800 	.word	0x40023800
 80020b0:	00f42400 	.word	0x00f42400
 80020b4:	007a1200 	.word	0x007a1200
 80020b8:	08002fb0 	.word	0x08002fb0

080020bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c0:	4b02      	ldr	r3, [pc, #8]	; (80020cc <HAL_RCC_GetHCLKFreq+0x10>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	2000002c 	.word	0x2000002c

080020d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d4:	f7ff fff2 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4903      	ldr	r1, [pc, #12]	; (80020f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	08002fcc 	.word	0x08002fcc

080020f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020fc:	f7ff ffde 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0adb      	lsrs	r3, r3, #11
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4903      	ldr	r1, [pc, #12]	; (800211c <HAL_RCC_GetPCLK2Freq+0x24>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	08002fcc 	.word	0x08002fcc

08002120 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d12c      	bne.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002138:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002144:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e016      	b.n	800217e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215a:	6253      	str	r3, [r2, #36]	; 0x24
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002170:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002184:	d105      	bne.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800218c:	d101      	bne.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800218e:	2301      	movs	r3, #1
 8002190:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0f      	ldr	r2, [pc, #60]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 0201 	bic.w	r2, r3, #1
 80021ac:	490b      	ldr	r1, [pc, #44]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d001      	beq.n	80021c6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40007000 	.word	0x40007000
 80021dc:	40023c00 	.word	0x40023c00

080021e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e042      	b.n	8002278 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fb1e 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2224      	movs	r2, #36	; 0x24
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f91d 	bl	8002464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b20      	cmp	r3, #32
 800229e:	d16d      	bne.n	800237c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <HAL_UART_Transmit+0x2c>
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e066      	b.n	800237e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2221      	movs	r2, #33	; 0x21
 80022ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022be:	f7fe fbf5 	bl	8000aac <HAL_GetTick>
 80022c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	88fa      	ldrh	r2, [r7, #6]
 80022c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	88fa      	ldrh	r2, [r7, #6]
 80022ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d8:	d108      	bne.n	80022ec <HAL_UART_Transmit+0x6c>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d104      	bne.n	80022ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	e003      	b.n	80022f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022f4:	e02a      	b.n	800234c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2200      	movs	r2, #0
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f840 	bl	8002386 <UART_WaitOnFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e036      	b.n	800237e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10b      	bne.n	800232e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002324:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	3302      	adds	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	e007      	b.n	800233e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	781a      	ldrb	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	3301      	adds	r3, #1
 800233c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1cf      	bne.n	80022f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2200      	movs	r2, #0
 800235e:	2140      	movs	r1, #64	; 0x40
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f810 	bl	8002386 <UART_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e006      	b.n	800237e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3720      	adds	r7, #32
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b090      	sub	sp, #64	; 0x40
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	4613      	mov	r3, r2
 8002394:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002396:	e050      	b.n	800243a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800239a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800239e:	d04c      	beq.n	800243a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80023a6:	f7fe fb81 	bl	8000aac <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d241      	bcs.n	800243a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	330c      	adds	r3, #12
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	e853 3f00 	ldrex	r3, [r3]
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80023cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	330c      	adds	r3, #12
 80023d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023d6:	637a      	str	r2, [r7, #52]	; 0x34
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023de:	e841 2300 	strex	r3, r2, [r1]
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1e5      	bne.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3314      	adds	r3, #20
 80023f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	e853 3f00 	ldrex	r3, [r3]
 80023f8:	613b      	str	r3, [r7, #16]
   return(result);
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	63bb      	str	r3, [r7, #56]	; 0x38
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3314      	adds	r3, #20
 8002408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800240a:	623a      	str	r2, [r7, #32]
 800240c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240e:	69f9      	ldr	r1, [r7, #28]
 8002410:	6a3a      	ldr	r2, [r7, #32]
 8002412:	e841 2300 	strex	r3, r2, [r1]
 8002416:	61bb      	str	r3, [r7, #24]
   return(result);
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1e5      	bne.n	80023ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e00f      	b.n	800245a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4013      	ands	r3, r2
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	429a      	cmp	r2, r3
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	429a      	cmp	r2, r3
 8002456:	d09f      	beq.n	8002398 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3740      	adds	r7, #64	; 0x40
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4313      	orrs	r3, r2
 8002498:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80024a4:	f023 030c 	bic.w	r3, r3, #12
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	430b      	orrs	r3, r1
 80024b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699a      	ldr	r2, [r3, #24]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a55      	ldr	r2, [pc, #340]	; (8002624 <UART_SetConfig+0x1c0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d103      	bne.n	80024da <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024d2:	f7ff fe11 	bl	80020f8 <HAL_RCC_GetPCLK2Freq>
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	e002      	b.n	80024e0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024da:	f7ff fdf9 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 80024de:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e8:	d14c      	bne.n	8002584 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	009a      	lsls	r2, r3, #2
 80024f4:	441a      	add	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	4a49      	ldr	r2, [pc, #292]	; (8002628 <UART_SetConfig+0x1c4>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	0119      	lsls	r1, r3, #4
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	009a      	lsls	r2, r3, #2
 8002514:	441a      	add	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002520:	4b41      	ldr	r3, [pc, #260]	; (8002628 <UART_SetConfig+0x1c4>)
 8002522:	fba3 0302 	umull	r0, r3, r3, r2
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2064      	movs	r0, #100	; 0x64
 800252a:	fb00 f303 	mul.w	r3, r0, r3
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	3332      	adds	r3, #50	; 0x32
 8002534:	4a3c      	ldr	r2, [pc, #240]	; (8002628 <UART_SetConfig+0x1c4>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002542:	4419      	add	r1, r3
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	009a      	lsls	r2, r3, #2
 800254e:	441a      	add	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fbb2 f2f3 	udiv	r2, r2, r3
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <UART_SetConfig+0x1c4>)
 800255c:	fba3 0302 	umull	r0, r3, r3, r2
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	2064      	movs	r0, #100	; 0x64
 8002564:	fb00 f303 	mul.w	r3, r0, r3
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	3332      	adds	r3, #50	; 0x32
 800256e:	4a2e      	ldr	r2, [pc, #184]	; (8002628 <UART_SetConfig+0x1c4>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	f003 0207 	and.w	r2, r3, #7
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	440a      	add	r2, r1
 8002580:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002582:	e04a      	b.n	800261a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	009a      	lsls	r2, r3, #2
 800258e:	441a      	add	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	4a23      	ldr	r2, [pc, #140]	; (8002628 <UART_SetConfig+0x1c4>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	0119      	lsls	r1, r3, #4
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	009a      	lsls	r2, r3, #2
 80025ae:	441a      	add	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <UART_SetConfig+0x1c4>)
 80025bc:	fba3 0302 	umull	r0, r3, r3, r2
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	2064      	movs	r0, #100	; 0x64
 80025c4:	fb00 f303 	mul.w	r3, r0, r3
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	3332      	adds	r3, #50	; 0x32
 80025ce:	4a16      	ldr	r2, [pc, #88]	; (8002628 <UART_SetConfig+0x1c4>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025da:	4419      	add	r1, r3
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	009a      	lsls	r2, r3, #2
 80025e6:	441a      	add	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <UART_SetConfig+0x1c4>)
 80025f4:	fba3 0302 	umull	r0, r3, r3, r2
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	2064      	movs	r0, #100	; 0x64
 80025fc:	fb00 f303 	mul.w	r3, r0, r3
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	3332      	adds	r3, #50	; 0x32
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <UART_SetConfig+0x1c4>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	f003 020f 	and.w	r2, r3, #15
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	440a      	add	r2, r1
 8002618:	609a      	str	r2, [r3, #8]
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40013800 	.word	0x40013800
 8002628:	51eb851f 	.word	0x51eb851f

0800262c <siprintf>:
 800262c:	b40e      	push	{r1, r2, r3}
 800262e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002632:	b500      	push	{lr}
 8002634:	b09c      	sub	sp, #112	; 0x70
 8002636:	ab1d      	add	r3, sp, #116	; 0x74
 8002638:	9002      	str	r0, [sp, #8]
 800263a:	9006      	str	r0, [sp, #24]
 800263c:	9107      	str	r1, [sp, #28]
 800263e:	9104      	str	r1, [sp, #16]
 8002640:	4808      	ldr	r0, [pc, #32]	; (8002664 <siprintf+0x38>)
 8002642:	4909      	ldr	r1, [pc, #36]	; (8002668 <siprintf+0x3c>)
 8002644:	f853 2b04 	ldr.w	r2, [r3], #4
 8002648:	9105      	str	r1, [sp, #20]
 800264a:	6800      	ldr	r0, [r0, #0]
 800264c:	a902      	add	r1, sp, #8
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	f000 f98e 	bl	8002970 <_svfiprintf_r>
 8002654:	2200      	movs	r2, #0
 8002656:	9b02      	ldr	r3, [sp, #8]
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	b01c      	add	sp, #112	; 0x70
 800265c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002660:	b003      	add	sp, #12
 8002662:	4770      	bx	lr
 8002664:	20000084 	.word	0x20000084
 8002668:	ffff0208 	.word	0xffff0208

0800266c <memset>:
 800266c:	4603      	mov	r3, r0
 800266e:	4402      	add	r2, r0
 8002670:	4293      	cmp	r3, r2
 8002672:	d100      	bne.n	8002676 <memset+0xa>
 8002674:	4770      	bx	lr
 8002676:	f803 1b01 	strb.w	r1, [r3], #1
 800267a:	e7f9      	b.n	8002670 <memset+0x4>

0800267c <__errno>:
 800267c:	4b01      	ldr	r3, [pc, #4]	; (8002684 <__errno+0x8>)
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20000084 	.word	0x20000084

08002688 <__libc_init_array>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	2600      	movs	r6, #0
 800268c:	4d0c      	ldr	r5, [pc, #48]	; (80026c0 <__libc_init_array+0x38>)
 800268e:	4c0d      	ldr	r4, [pc, #52]	; (80026c4 <__libc_init_array+0x3c>)
 8002690:	1b64      	subs	r4, r4, r5
 8002692:	10a4      	asrs	r4, r4, #2
 8002694:	42a6      	cmp	r6, r4
 8002696:	d109      	bne.n	80026ac <__libc_init_array+0x24>
 8002698:	f000 fc7a 	bl	8002f90 <_init>
 800269c:	2600      	movs	r6, #0
 800269e:	4d0a      	ldr	r5, [pc, #40]	; (80026c8 <__libc_init_array+0x40>)
 80026a0:	4c0a      	ldr	r4, [pc, #40]	; (80026cc <__libc_init_array+0x44>)
 80026a2:	1b64      	subs	r4, r4, r5
 80026a4:	10a4      	asrs	r4, r4, #2
 80026a6:	42a6      	cmp	r6, r4
 80026a8:	d105      	bne.n	80026b6 <__libc_init_array+0x2e>
 80026aa:	bd70      	pop	{r4, r5, r6, pc}
 80026ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b0:	4798      	blx	r3
 80026b2:	3601      	adds	r6, #1
 80026b4:	e7ee      	b.n	8002694 <__libc_init_array+0xc>
 80026b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ba:	4798      	blx	r3
 80026bc:	3601      	adds	r6, #1
 80026be:	e7f2      	b.n	80026a6 <__libc_init_array+0x1e>
 80026c0:	08003010 	.word	0x08003010
 80026c4:	08003010 	.word	0x08003010
 80026c8:	08003010 	.word	0x08003010
 80026cc:	08003014 	.word	0x08003014

080026d0 <__retarget_lock_acquire_recursive>:
 80026d0:	4770      	bx	lr

080026d2 <__retarget_lock_release_recursive>:
 80026d2:	4770      	bx	lr

080026d4 <_free_r>:
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	4605      	mov	r5, r0
 80026d8:	2900      	cmp	r1, #0
 80026da:	d040      	beq.n	800275e <_free_r+0x8a>
 80026dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026e0:	1f0c      	subs	r4, r1, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bfb8      	it	lt
 80026e6:	18e4      	addlt	r4, r4, r3
 80026e8:	f000 f8dc 	bl	80028a4 <__malloc_lock>
 80026ec:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <_free_r+0x8c>)
 80026ee:	6813      	ldr	r3, [r2, #0]
 80026f0:	b933      	cbnz	r3, 8002700 <_free_r+0x2c>
 80026f2:	6063      	str	r3, [r4, #4]
 80026f4:	6014      	str	r4, [r2, #0]
 80026f6:	4628      	mov	r0, r5
 80026f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026fc:	f000 b8d8 	b.w	80028b0 <__malloc_unlock>
 8002700:	42a3      	cmp	r3, r4
 8002702:	d908      	bls.n	8002716 <_free_r+0x42>
 8002704:	6820      	ldr	r0, [r4, #0]
 8002706:	1821      	adds	r1, r4, r0
 8002708:	428b      	cmp	r3, r1
 800270a:	bf01      	itttt	eq
 800270c:	6819      	ldreq	r1, [r3, #0]
 800270e:	685b      	ldreq	r3, [r3, #4]
 8002710:	1809      	addeq	r1, r1, r0
 8002712:	6021      	streq	r1, [r4, #0]
 8002714:	e7ed      	b.n	80026f2 <_free_r+0x1e>
 8002716:	461a      	mov	r2, r3
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	b10b      	cbz	r3, 8002720 <_free_r+0x4c>
 800271c:	42a3      	cmp	r3, r4
 800271e:	d9fa      	bls.n	8002716 <_free_r+0x42>
 8002720:	6811      	ldr	r1, [r2, #0]
 8002722:	1850      	adds	r0, r2, r1
 8002724:	42a0      	cmp	r0, r4
 8002726:	d10b      	bne.n	8002740 <_free_r+0x6c>
 8002728:	6820      	ldr	r0, [r4, #0]
 800272a:	4401      	add	r1, r0
 800272c:	1850      	adds	r0, r2, r1
 800272e:	4283      	cmp	r3, r0
 8002730:	6011      	str	r1, [r2, #0]
 8002732:	d1e0      	bne.n	80026f6 <_free_r+0x22>
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4408      	add	r0, r1
 800273a:	6010      	str	r0, [r2, #0]
 800273c:	6053      	str	r3, [r2, #4]
 800273e:	e7da      	b.n	80026f6 <_free_r+0x22>
 8002740:	d902      	bls.n	8002748 <_free_r+0x74>
 8002742:	230c      	movs	r3, #12
 8002744:	602b      	str	r3, [r5, #0]
 8002746:	e7d6      	b.n	80026f6 <_free_r+0x22>
 8002748:	6820      	ldr	r0, [r4, #0]
 800274a:	1821      	adds	r1, r4, r0
 800274c:	428b      	cmp	r3, r1
 800274e:	bf01      	itttt	eq
 8002750:	6819      	ldreq	r1, [r3, #0]
 8002752:	685b      	ldreq	r3, [r3, #4]
 8002754:	1809      	addeq	r1, r1, r0
 8002756:	6021      	streq	r1, [r4, #0]
 8002758:	6063      	str	r3, [r4, #4]
 800275a:	6054      	str	r4, [r2, #4]
 800275c:	e7cb      	b.n	80026f6 <_free_r+0x22>
 800275e:	bd38      	pop	{r3, r4, r5, pc}
 8002760:	200002a4 	.word	0x200002a4

08002764 <sbrk_aligned>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	4e0e      	ldr	r6, [pc, #56]	; (80027a0 <sbrk_aligned+0x3c>)
 8002768:	460c      	mov	r4, r1
 800276a:	6831      	ldr	r1, [r6, #0]
 800276c:	4605      	mov	r5, r0
 800276e:	b911      	cbnz	r1, 8002776 <sbrk_aligned+0x12>
 8002770:	f000 fbaa 	bl	8002ec8 <_sbrk_r>
 8002774:	6030      	str	r0, [r6, #0]
 8002776:	4621      	mov	r1, r4
 8002778:	4628      	mov	r0, r5
 800277a:	f000 fba5 	bl	8002ec8 <_sbrk_r>
 800277e:	1c43      	adds	r3, r0, #1
 8002780:	d00a      	beq.n	8002798 <sbrk_aligned+0x34>
 8002782:	1cc4      	adds	r4, r0, #3
 8002784:	f024 0403 	bic.w	r4, r4, #3
 8002788:	42a0      	cmp	r0, r4
 800278a:	d007      	beq.n	800279c <sbrk_aligned+0x38>
 800278c:	1a21      	subs	r1, r4, r0
 800278e:	4628      	mov	r0, r5
 8002790:	f000 fb9a 	bl	8002ec8 <_sbrk_r>
 8002794:	3001      	adds	r0, #1
 8002796:	d101      	bne.n	800279c <sbrk_aligned+0x38>
 8002798:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800279c:	4620      	mov	r0, r4
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	200002a8 	.word	0x200002a8

080027a4 <_malloc_r>:
 80027a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027a8:	1ccd      	adds	r5, r1, #3
 80027aa:	f025 0503 	bic.w	r5, r5, #3
 80027ae:	3508      	adds	r5, #8
 80027b0:	2d0c      	cmp	r5, #12
 80027b2:	bf38      	it	cc
 80027b4:	250c      	movcc	r5, #12
 80027b6:	2d00      	cmp	r5, #0
 80027b8:	4607      	mov	r7, r0
 80027ba:	db01      	blt.n	80027c0 <_malloc_r+0x1c>
 80027bc:	42a9      	cmp	r1, r5
 80027be:	d905      	bls.n	80027cc <_malloc_r+0x28>
 80027c0:	230c      	movs	r3, #12
 80027c2:	2600      	movs	r6, #0
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	4630      	mov	r0, r6
 80027c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80028a0 <_malloc_r+0xfc>
 80027d0:	f000 f868 	bl	80028a4 <__malloc_lock>
 80027d4:	f8d8 3000 	ldr.w	r3, [r8]
 80027d8:	461c      	mov	r4, r3
 80027da:	bb5c      	cbnz	r4, 8002834 <_malloc_r+0x90>
 80027dc:	4629      	mov	r1, r5
 80027de:	4638      	mov	r0, r7
 80027e0:	f7ff ffc0 	bl	8002764 <sbrk_aligned>
 80027e4:	1c43      	adds	r3, r0, #1
 80027e6:	4604      	mov	r4, r0
 80027e8:	d155      	bne.n	8002896 <_malloc_r+0xf2>
 80027ea:	f8d8 4000 	ldr.w	r4, [r8]
 80027ee:	4626      	mov	r6, r4
 80027f0:	2e00      	cmp	r6, #0
 80027f2:	d145      	bne.n	8002880 <_malloc_r+0xdc>
 80027f4:	2c00      	cmp	r4, #0
 80027f6:	d048      	beq.n	800288a <_malloc_r+0xe6>
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	4631      	mov	r1, r6
 80027fc:	4638      	mov	r0, r7
 80027fe:	eb04 0903 	add.w	r9, r4, r3
 8002802:	f000 fb61 	bl	8002ec8 <_sbrk_r>
 8002806:	4581      	cmp	r9, r0
 8002808:	d13f      	bne.n	800288a <_malloc_r+0xe6>
 800280a:	6821      	ldr	r1, [r4, #0]
 800280c:	4638      	mov	r0, r7
 800280e:	1a6d      	subs	r5, r5, r1
 8002810:	4629      	mov	r1, r5
 8002812:	f7ff ffa7 	bl	8002764 <sbrk_aligned>
 8002816:	3001      	adds	r0, #1
 8002818:	d037      	beq.n	800288a <_malloc_r+0xe6>
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	442b      	add	r3, r5
 800281e:	6023      	str	r3, [r4, #0]
 8002820:	f8d8 3000 	ldr.w	r3, [r8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d038      	beq.n	800289a <_malloc_r+0xf6>
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	42a2      	cmp	r2, r4
 800282c:	d12b      	bne.n	8002886 <_malloc_r+0xe2>
 800282e:	2200      	movs	r2, #0
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	e00f      	b.n	8002854 <_malloc_r+0xb0>
 8002834:	6822      	ldr	r2, [r4, #0]
 8002836:	1b52      	subs	r2, r2, r5
 8002838:	d41f      	bmi.n	800287a <_malloc_r+0xd6>
 800283a:	2a0b      	cmp	r2, #11
 800283c:	d917      	bls.n	800286e <_malloc_r+0xca>
 800283e:	1961      	adds	r1, r4, r5
 8002840:	42a3      	cmp	r3, r4
 8002842:	6025      	str	r5, [r4, #0]
 8002844:	bf18      	it	ne
 8002846:	6059      	strne	r1, [r3, #4]
 8002848:	6863      	ldr	r3, [r4, #4]
 800284a:	bf08      	it	eq
 800284c:	f8c8 1000 	streq.w	r1, [r8]
 8002850:	5162      	str	r2, [r4, r5]
 8002852:	604b      	str	r3, [r1, #4]
 8002854:	4638      	mov	r0, r7
 8002856:	f104 060b 	add.w	r6, r4, #11
 800285a:	f000 f829 	bl	80028b0 <__malloc_unlock>
 800285e:	f026 0607 	bic.w	r6, r6, #7
 8002862:	1d23      	adds	r3, r4, #4
 8002864:	1af2      	subs	r2, r6, r3
 8002866:	d0ae      	beq.n	80027c6 <_malloc_r+0x22>
 8002868:	1b9b      	subs	r3, r3, r6
 800286a:	50a3      	str	r3, [r4, r2]
 800286c:	e7ab      	b.n	80027c6 <_malloc_r+0x22>
 800286e:	42a3      	cmp	r3, r4
 8002870:	6862      	ldr	r2, [r4, #4]
 8002872:	d1dd      	bne.n	8002830 <_malloc_r+0x8c>
 8002874:	f8c8 2000 	str.w	r2, [r8]
 8002878:	e7ec      	b.n	8002854 <_malloc_r+0xb0>
 800287a:	4623      	mov	r3, r4
 800287c:	6864      	ldr	r4, [r4, #4]
 800287e:	e7ac      	b.n	80027da <_malloc_r+0x36>
 8002880:	4634      	mov	r4, r6
 8002882:	6876      	ldr	r6, [r6, #4]
 8002884:	e7b4      	b.n	80027f0 <_malloc_r+0x4c>
 8002886:	4613      	mov	r3, r2
 8002888:	e7cc      	b.n	8002824 <_malloc_r+0x80>
 800288a:	230c      	movs	r3, #12
 800288c:	4638      	mov	r0, r7
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	f000 f80e 	bl	80028b0 <__malloc_unlock>
 8002894:	e797      	b.n	80027c6 <_malloc_r+0x22>
 8002896:	6025      	str	r5, [r4, #0]
 8002898:	e7dc      	b.n	8002854 <_malloc_r+0xb0>
 800289a:	605b      	str	r3, [r3, #4]
 800289c:	deff      	udf	#255	; 0xff
 800289e:	bf00      	nop
 80028a0:	200002a4 	.word	0x200002a4

080028a4 <__malloc_lock>:
 80028a4:	4801      	ldr	r0, [pc, #4]	; (80028ac <__malloc_lock+0x8>)
 80028a6:	f7ff bf13 	b.w	80026d0 <__retarget_lock_acquire_recursive>
 80028aa:	bf00      	nop
 80028ac:	200002a0 	.word	0x200002a0

080028b0 <__malloc_unlock>:
 80028b0:	4801      	ldr	r0, [pc, #4]	; (80028b8 <__malloc_unlock+0x8>)
 80028b2:	f7ff bf0e 	b.w	80026d2 <__retarget_lock_release_recursive>
 80028b6:	bf00      	nop
 80028b8:	200002a0 	.word	0x200002a0

080028bc <__ssputs_r>:
 80028bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028c0:	461f      	mov	r7, r3
 80028c2:	688e      	ldr	r6, [r1, #8]
 80028c4:	4682      	mov	sl, r0
 80028c6:	42be      	cmp	r6, r7
 80028c8:	460c      	mov	r4, r1
 80028ca:	4690      	mov	r8, r2
 80028cc:	680b      	ldr	r3, [r1, #0]
 80028ce:	d82c      	bhi.n	800292a <__ssputs_r+0x6e>
 80028d0:	898a      	ldrh	r2, [r1, #12]
 80028d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80028d6:	d026      	beq.n	8002926 <__ssputs_r+0x6a>
 80028d8:	6965      	ldr	r5, [r4, #20]
 80028da:	6909      	ldr	r1, [r1, #16]
 80028dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028e0:	eba3 0901 	sub.w	r9, r3, r1
 80028e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80028e8:	1c7b      	adds	r3, r7, #1
 80028ea:	444b      	add	r3, r9
 80028ec:	106d      	asrs	r5, r5, #1
 80028ee:	429d      	cmp	r5, r3
 80028f0:	bf38      	it	cc
 80028f2:	461d      	movcc	r5, r3
 80028f4:	0553      	lsls	r3, r2, #21
 80028f6:	d527      	bpl.n	8002948 <__ssputs_r+0x8c>
 80028f8:	4629      	mov	r1, r5
 80028fa:	f7ff ff53 	bl	80027a4 <_malloc_r>
 80028fe:	4606      	mov	r6, r0
 8002900:	b360      	cbz	r0, 800295c <__ssputs_r+0xa0>
 8002902:	464a      	mov	r2, r9
 8002904:	6921      	ldr	r1, [r4, #16]
 8002906:	f000 fafd 	bl	8002f04 <memcpy>
 800290a:	89a3      	ldrh	r3, [r4, #12]
 800290c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002914:	81a3      	strh	r3, [r4, #12]
 8002916:	6126      	str	r6, [r4, #16]
 8002918:	444e      	add	r6, r9
 800291a:	6026      	str	r6, [r4, #0]
 800291c:	463e      	mov	r6, r7
 800291e:	6165      	str	r5, [r4, #20]
 8002920:	eba5 0509 	sub.w	r5, r5, r9
 8002924:	60a5      	str	r5, [r4, #8]
 8002926:	42be      	cmp	r6, r7
 8002928:	d900      	bls.n	800292c <__ssputs_r+0x70>
 800292a:	463e      	mov	r6, r7
 800292c:	4632      	mov	r2, r6
 800292e:	4641      	mov	r1, r8
 8002930:	6820      	ldr	r0, [r4, #0]
 8002932:	f000 faaf 	bl	8002e94 <memmove>
 8002936:	2000      	movs	r0, #0
 8002938:	68a3      	ldr	r3, [r4, #8]
 800293a:	1b9b      	subs	r3, r3, r6
 800293c:	60a3      	str	r3, [r4, #8]
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	4433      	add	r3, r6
 8002942:	6023      	str	r3, [r4, #0]
 8002944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002948:	462a      	mov	r2, r5
 800294a:	f000 fae9 	bl	8002f20 <_realloc_r>
 800294e:	4606      	mov	r6, r0
 8002950:	2800      	cmp	r0, #0
 8002952:	d1e0      	bne.n	8002916 <__ssputs_r+0x5a>
 8002954:	4650      	mov	r0, sl
 8002956:	6921      	ldr	r1, [r4, #16]
 8002958:	f7ff febc 	bl	80026d4 <_free_r>
 800295c:	230c      	movs	r3, #12
 800295e:	f8ca 3000 	str.w	r3, [sl]
 8002962:	89a3      	ldrh	r3, [r4, #12]
 8002964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800296c:	81a3      	strh	r3, [r4, #12]
 800296e:	e7e9      	b.n	8002944 <__ssputs_r+0x88>

08002970 <_svfiprintf_r>:
 8002970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002974:	4698      	mov	r8, r3
 8002976:	898b      	ldrh	r3, [r1, #12]
 8002978:	4607      	mov	r7, r0
 800297a:	061b      	lsls	r3, r3, #24
 800297c:	460d      	mov	r5, r1
 800297e:	4614      	mov	r4, r2
 8002980:	b09d      	sub	sp, #116	; 0x74
 8002982:	d50e      	bpl.n	80029a2 <_svfiprintf_r+0x32>
 8002984:	690b      	ldr	r3, [r1, #16]
 8002986:	b963      	cbnz	r3, 80029a2 <_svfiprintf_r+0x32>
 8002988:	2140      	movs	r1, #64	; 0x40
 800298a:	f7ff ff0b 	bl	80027a4 <_malloc_r>
 800298e:	6028      	str	r0, [r5, #0]
 8002990:	6128      	str	r0, [r5, #16]
 8002992:	b920      	cbnz	r0, 800299e <_svfiprintf_r+0x2e>
 8002994:	230c      	movs	r3, #12
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800299c:	e0d0      	b.n	8002b40 <_svfiprintf_r+0x1d0>
 800299e:	2340      	movs	r3, #64	; 0x40
 80029a0:	616b      	str	r3, [r5, #20]
 80029a2:	2300      	movs	r3, #0
 80029a4:	9309      	str	r3, [sp, #36]	; 0x24
 80029a6:	2320      	movs	r3, #32
 80029a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029ac:	2330      	movs	r3, #48	; 0x30
 80029ae:	f04f 0901 	mov.w	r9, #1
 80029b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80029b6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002b58 <_svfiprintf_r+0x1e8>
 80029ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029be:	4623      	mov	r3, r4
 80029c0:	469a      	mov	sl, r3
 80029c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029c6:	b10a      	cbz	r2, 80029cc <_svfiprintf_r+0x5c>
 80029c8:	2a25      	cmp	r2, #37	; 0x25
 80029ca:	d1f9      	bne.n	80029c0 <_svfiprintf_r+0x50>
 80029cc:	ebba 0b04 	subs.w	fp, sl, r4
 80029d0:	d00b      	beq.n	80029ea <_svfiprintf_r+0x7a>
 80029d2:	465b      	mov	r3, fp
 80029d4:	4622      	mov	r2, r4
 80029d6:	4629      	mov	r1, r5
 80029d8:	4638      	mov	r0, r7
 80029da:	f7ff ff6f 	bl	80028bc <__ssputs_r>
 80029de:	3001      	adds	r0, #1
 80029e0:	f000 80a9 	beq.w	8002b36 <_svfiprintf_r+0x1c6>
 80029e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029e6:	445a      	add	r2, fp
 80029e8:	9209      	str	r2, [sp, #36]	; 0x24
 80029ea:	f89a 3000 	ldrb.w	r3, [sl]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80a1 	beq.w	8002b36 <_svfiprintf_r+0x1c6>
 80029f4:	2300      	movs	r3, #0
 80029f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029fe:	f10a 0a01 	add.w	sl, sl, #1
 8002a02:	9304      	str	r3, [sp, #16]
 8002a04:	9307      	str	r3, [sp, #28]
 8002a06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a0a:	931a      	str	r3, [sp, #104]	; 0x68
 8002a0c:	4654      	mov	r4, sl
 8002a0e:	2205      	movs	r2, #5
 8002a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a14:	4850      	ldr	r0, [pc, #320]	; (8002b58 <_svfiprintf_r+0x1e8>)
 8002a16:	f000 fa67 	bl	8002ee8 <memchr>
 8002a1a:	9a04      	ldr	r2, [sp, #16]
 8002a1c:	b9d8      	cbnz	r0, 8002a56 <_svfiprintf_r+0xe6>
 8002a1e:	06d0      	lsls	r0, r2, #27
 8002a20:	bf44      	itt	mi
 8002a22:	2320      	movmi	r3, #32
 8002a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a28:	0711      	lsls	r1, r2, #28
 8002a2a:	bf44      	itt	mi
 8002a2c:	232b      	movmi	r3, #43	; 0x2b
 8002a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a32:	f89a 3000 	ldrb.w	r3, [sl]
 8002a36:	2b2a      	cmp	r3, #42	; 0x2a
 8002a38:	d015      	beq.n	8002a66 <_svfiprintf_r+0xf6>
 8002a3a:	4654      	mov	r4, sl
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f04f 0c0a 	mov.w	ip, #10
 8002a42:	9a07      	ldr	r2, [sp, #28]
 8002a44:	4621      	mov	r1, r4
 8002a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a4a:	3b30      	subs	r3, #48	; 0x30
 8002a4c:	2b09      	cmp	r3, #9
 8002a4e:	d94d      	bls.n	8002aec <_svfiprintf_r+0x17c>
 8002a50:	b1b0      	cbz	r0, 8002a80 <_svfiprintf_r+0x110>
 8002a52:	9207      	str	r2, [sp, #28]
 8002a54:	e014      	b.n	8002a80 <_svfiprintf_r+0x110>
 8002a56:	eba0 0308 	sub.w	r3, r0, r8
 8002a5a:	fa09 f303 	lsl.w	r3, r9, r3
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	46a2      	mov	sl, r4
 8002a62:	9304      	str	r3, [sp, #16]
 8002a64:	e7d2      	b.n	8002a0c <_svfiprintf_r+0x9c>
 8002a66:	9b03      	ldr	r3, [sp, #12]
 8002a68:	1d19      	adds	r1, r3, #4
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	9103      	str	r1, [sp, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	bfbb      	ittet	lt
 8002a72:	425b      	neglt	r3, r3
 8002a74:	f042 0202 	orrlt.w	r2, r2, #2
 8002a78:	9307      	strge	r3, [sp, #28]
 8002a7a:	9307      	strlt	r3, [sp, #28]
 8002a7c:	bfb8      	it	lt
 8002a7e:	9204      	strlt	r2, [sp, #16]
 8002a80:	7823      	ldrb	r3, [r4, #0]
 8002a82:	2b2e      	cmp	r3, #46	; 0x2e
 8002a84:	d10c      	bne.n	8002aa0 <_svfiprintf_r+0x130>
 8002a86:	7863      	ldrb	r3, [r4, #1]
 8002a88:	2b2a      	cmp	r3, #42	; 0x2a
 8002a8a:	d134      	bne.n	8002af6 <_svfiprintf_r+0x186>
 8002a8c:	9b03      	ldr	r3, [sp, #12]
 8002a8e:	3402      	adds	r4, #2
 8002a90:	1d1a      	adds	r2, r3, #4
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	9203      	str	r2, [sp, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bfb8      	it	lt
 8002a9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002a9e:	9305      	str	r3, [sp, #20]
 8002aa0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002b5c <_svfiprintf_r+0x1ec>
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	4650      	mov	r0, sl
 8002aa8:	7821      	ldrb	r1, [r4, #0]
 8002aaa:	f000 fa1d 	bl	8002ee8 <memchr>
 8002aae:	b138      	cbz	r0, 8002ac0 <_svfiprintf_r+0x150>
 8002ab0:	2240      	movs	r2, #64	; 0x40
 8002ab2:	9b04      	ldr	r3, [sp, #16]
 8002ab4:	eba0 000a 	sub.w	r0, r0, sl
 8002ab8:	4082      	lsls	r2, r0
 8002aba:	4313      	orrs	r3, r2
 8002abc:	3401      	adds	r4, #1
 8002abe:	9304      	str	r3, [sp, #16]
 8002ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ac4:	2206      	movs	r2, #6
 8002ac6:	4826      	ldr	r0, [pc, #152]	; (8002b60 <_svfiprintf_r+0x1f0>)
 8002ac8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002acc:	f000 fa0c 	bl	8002ee8 <memchr>
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d038      	beq.n	8002b46 <_svfiprintf_r+0x1d6>
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <_svfiprintf_r+0x1f4>)
 8002ad6:	bb1b      	cbnz	r3, 8002b20 <_svfiprintf_r+0x1b0>
 8002ad8:	9b03      	ldr	r3, [sp, #12]
 8002ada:	3307      	adds	r3, #7
 8002adc:	f023 0307 	bic.w	r3, r3, #7
 8002ae0:	3308      	adds	r3, #8
 8002ae2:	9303      	str	r3, [sp, #12]
 8002ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ae6:	4433      	add	r3, r6
 8002ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8002aea:	e768      	b.n	80029be <_svfiprintf_r+0x4e>
 8002aec:	460c      	mov	r4, r1
 8002aee:	2001      	movs	r0, #1
 8002af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002af4:	e7a6      	b.n	8002a44 <_svfiprintf_r+0xd4>
 8002af6:	2300      	movs	r3, #0
 8002af8:	f04f 0c0a 	mov.w	ip, #10
 8002afc:	4619      	mov	r1, r3
 8002afe:	3401      	adds	r4, #1
 8002b00:	9305      	str	r3, [sp, #20]
 8002b02:	4620      	mov	r0, r4
 8002b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b08:	3a30      	subs	r2, #48	; 0x30
 8002b0a:	2a09      	cmp	r2, #9
 8002b0c:	d903      	bls.n	8002b16 <_svfiprintf_r+0x1a6>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0c6      	beq.n	8002aa0 <_svfiprintf_r+0x130>
 8002b12:	9105      	str	r1, [sp, #20]
 8002b14:	e7c4      	b.n	8002aa0 <_svfiprintf_r+0x130>
 8002b16:	4604      	mov	r4, r0
 8002b18:	2301      	movs	r3, #1
 8002b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b1e:	e7f0      	b.n	8002b02 <_svfiprintf_r+0x192>
 8002b20:	ab03      	add	r3, sp, #12
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	462a      	mov	r2, r5
 8002b26:	4638      	mov	r0, r7
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <_svfiprintf_r+0x1f8>)
 8002b2a:	a904      	add	r1, sp, #16
 8002b2c:	f3af 8000 	nop.w
 8002b30:	1c42      	adds	r2, r0, #1
 8002b32:	4606      	mov	r6, r0
 8002b34:	d1d6      	bne.n	8002ae4 <_svfiprintf_r+0x174>
 8002b36:	89ab      	ldrh	r3, [r5, #12]
 8002b38:	065b      	lsls	r3, r3, #25
 8002b3a:	f53f af2d 	bmi.w	8002998 <_svfiprintf_r+0x28>
 8002b3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b40:	b01d      	add	sp, #116	; 0x74
 8002b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b46:	ab03      	add	r3, sp, #12
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	462a      	mov	r2, r5
 8002b4c:	4638      	mov	r0, r7
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <_svfiprintf_r+0x1f8>)
 8002b50:	a904      	add	r1, sp, #16
 8002b52:	f000 f87d 	bl	8002c50 <_printf_i>
 8002b56:	e7eb      	b.n	8002b30 <_svfiprintf_r+0x1c0>
 8002b58:	08002fd4 	.word	0x08002fd4
 8002b5c:	08002fda 	.word	0x08002fda
 8002b60:	08002fde 	.word	0x08002fde
 8002b64:	00000000 	.word	0x00000000
 8002b68:	080028bd 	.word	0x080028bd

08002b6c <_printf_common>:
 8002b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b70:	4616      	mov	r6, r2
 8002b72:	4699      	mov	r9, r3
 8002b74:	688a      	ldr	r2, [r1, #8]
 8002b76:	690b      	ldr	r3, [r1, #16]
 8002b78:	4607      	mov	r7, r0
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	bfb8      	it	lt
 8002b7e:	4613      	movlt	r3, r2
 8002b80:	6033      	str	r3, [r6, #0]
 8002b82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b86:	460c      	mov	r4, r1
 8002b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b8c:	b10a      	cbz	r2, 8002b92 <_printf_common+0x26>
 8002b8e:	3301      	adds	r3, #1
 8002b90:	6033      	str	r3, [r6, #0]
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	0699      	lsls	r1, r3, #26
 8002b96:	bf42      	ittt	mi
 8002b98:	6833      	ldrmi	r3, [r6, #0]
 8002b9a:	3302      	addmi	r3, #2
 8002b9c:	6033      	strmi	r3, [r6, #0]
 8002b9e:	6825      	ldr	r5, [r4, #0]
 8002ba0:	f015 0506 	ands.w	r5, r5, #6
 8002ba4:	d106      	bne.n	8002bb4 <_printf_common+0x48>
 8002ba6:	f104 0a19 	add.w	sl, r4, #25
 8002baa:	68e3      	ldr	r3, [r4, #12]
 8002bac:	6832      	ldr	r2, [r6, #0]
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	42ab      	cmp	r3, r5
 8002bb2:	dc2b      	bgt.n	8002c0c <_printf_common+0xa0>
 8002bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bb8:	1e13      	subs	r3, r2, #0
 8002bba:	6822      	ldr	r2, [r4, #0]
 8002bbc:	bf18      	it	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	0692      	lsls	r2, r2, #26
 8002bc2:	d430      	bmi.n	8002c26 <_printf_common+0xba>
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	4638      	mov	r0, r7
 8002bc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bcc:	47c0      	blx	r8
 8002bce:	3001      	adds	r0, #1
 8002bd0:	d023      	beq.n	8002c1a <_printf_common+0xae>
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	6922      	ldr	r2, [r4, #16]
 8002bd6:	f003 0306 	and.w	r3, r3, #6
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	bf14      	ite	ne
 8002bde:	2500      	movne	r5, #0
 8002be0:	6833      	ldreq	r3, [r6, #0]
 8002be2:	f04f 0600 	mov.w	r6, #0
 8002be6:	bf08      	it	eq
 8002be8:	68e5      	ldreq	r5, [r4, #12]
 8002bea:	f104 041a 	add.w	r4, r4, #26
 8002bee:	bf08      	it	eq
 8002bf0:	1aed      	subeq	r5, r5, r3
 8002bf2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002bf6:	bf08      	it	eq
 8002bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	bfc4      	itt	gt
 8002c00:	1a9b      	subgt	r3, r3, r2
 8002c02:	18ed      	addgt	r5, r5, r3
 8002c04:	42b5      	cmp	r5, r6
 8002c06:	d11a      	bne.n	8002c3e <_printf_common+0xd2>
 8002c08:	2000      	movs	r0, #0
 8002c0a:	e008      	b.n	8002c1e <_printf_common+0xb2>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	4652      	mov	r2, sl
 8002c10:	4649      	mov	r1, r9
 8002c12:	4638      	mov	r0, r7
 8002c14:	47c0      	blx	r8
 8002c16:	3001      	adds	r0, #1
 8002c18:	d103      	bne.n	8002c22 <_printf_common+0xb6>
 8002c1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c22:	3501      	adds	r5, #1
 8002c24:	e7c1      	b.n	8002baa <_printf_common+0x3e>
 8002c26:	2030      	movs	r0, #48	; 0x30
 8002c28:	18e1      	adds	r1, r4, r3
 8002c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c34:	4422      	add	r2, r4
 8002c36:	3302      	adds	r3, #2
 8002c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c3c:	e7c2      	b.n	8002bc4 <_printf_common+0x58>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	4622      	mov	r2, r4
 8002c42:	4649      	mov	r1, r9
 8002c44:	4638      	mov	r0, r7
 8002c46:	47c0      	blx	r8
 8002c48:	3001      	adds	r0, #1
 8002c4a:	d0e6      	beq.n	8002c1a <_printf_common+0xae>
 8002c4c:	3601      	adds	r6, #1
 8002c4e:	e7d9      	b.n	8002c04 <_printf_common+0x98>

08002c50 <_printf_i>:
 8002c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c54:	7e0f      	ldrb	r7, [r1, #24]
 8002c56:	4691      	mov	r9, r2
 8002c58:	2f78      	cmp	r7, #120	; 0x78
 8002c5a:	4680      	mov	r8, r0
 8002c5c:	460c      	mov	r4, r1
 8002c5e:	469a      	mov	sl, r3
 8002c60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c66:	d807      	bhi.n	8002c78 <_printf_i+0x28>
 8002c68:	2f62      	cmp	r7, #98	; 0x62
 8002c6a:	d80a      	bhi.n	8002c82 <_printf_i+0x32>
 8002c6c:	2f00      	cmp	r7, #0
 8002c6e:	f000 80d5 	beq.w	8002e1c <_printf_i+0x1cc>
 8002c72:	2f58      	cmp	r7, #88	; 0x58
 8002c74:	f000 80c1 	beq.w	8002dfa <_printf_i+0x1aa>
 8002c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c80:	e03a      	b.n	8002cf8 <_printf_i+0xa8>
 8002c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c86:	2b15      	cmp	r3, #21
 8002c88:	d8f6      	bhi.n	8002c78 <_printf_i+0x28>
 8002c8a:	a101      	add	r1, pc, #4	; (adr r1, 8002c90 <_printf_i+0x40>)
 8002c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c90:	08002ce9 	.word	0x08002ce9
 8002c94:	08002cfd 	.word	0x08002cfd
 8002c98:	08002c79 	.word	0x08002c79
 8002c9c:	08002c79 	.word	0x08002c79
 8002ca0:	08002c79 	.word	0x08002c79
 8002ca4:	08002c79 	.word	0x08002c79
 8002ca8:	08002cfd 	.word	0x08002cfd
 8002cac:	08002c79 	.word	0x08002c79
 8002cb0:	08002c79 	.word	0x08002c79
 8002cb4:	08002c79 	.word	0x08002c79
 8002cb8:	08002c79 	.word	0x08002c79
 8002cbc:	08002e03 	.word	0x08002e03
 8002cc0:	08002d29 	.word	0x08002d29
 8002cc4:	08002dbd 	.word	0x08002dbd
 8002cc8:	08002c79 	.word	0x08002c79
 8002ccc:	08002c79 	.word	0x08002c79
 8002cd0:	08002e25 	.word	0x08002e25
 8002cd4:	08002c79 	.word	0x08002c79
 8002cd8:	08002d29 	.word	0x08002d29
 8002cdc:	08002c79 	.word	0x08002c79
 8002ce0:	08002c79 	.word	0x08002c79
 8002ce4:	08002dc5 	.word	0x08002dc5
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	1d1a      	adds	r2, r3, #4
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	602a      	str	r2, [r5, #0]
 8002cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0a0      	b.n	8002e3e <_printf_i+0x1ee>
 8002cfc:	6820      	ldr	r0, [r4, #0]
 8002cfe:	682b      	ldr	r3, [r5, #0]
 8002d00:	0607      	lsls	r7, r0, #24
 8002d02:	f103 0104 	add.w	r1, r3, #4
 8002d06:	6029      	str	r1, [r5, #0]
 8002d08:	d501      	bpl.n	8002d0e <_printf_i+0xbe>
 8002d0a:	681e      	ldr	r6, [r3, #0]
 8002d0c:	e003      	b.n	8002d16 <_printf_i+0xc6>
 8002d0e:	0646      	lsls	r6, r0, #25
 8002d10:	d5fb      	bpl.n	8002d0a <_printf_i+0xba>
 8002d12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d16:	2e00      	cmp	r6, #0
 8002d18:	da03      	bge.n	8002d22 <_printf_i+0xd2>
 8002d1a:	232d      	movs	r3, #45	; 0x2d
 8002d1c:	4276      	negs	r6, r6
 8002d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d22:	230a      	movs	r3, #10
 8002d24:	4859      	ldr	r0, [pc, #356]	; (8002e8c <_printf_i+0x23c>)
 8002d26:	e012      	b.n	8002d4e <_printf_i+0xfe>
 8002d28:	682b      	ldr	r3, [r5, #0]
 8002d2a:	6820      	ldr	r0, [r4, #0]
 8002d2c:	1d19      	adds	r1, r3, #4
 8002d2e:	6029      	str	r1, [r5, #0]
 8002d30:	0605      	lsls	r5, r0, #24
 8002d32:	d501      	bpl.n	8002d38 <_printf_i+0xe8>
 8002d34:	681e      	ldr	r6, [r3, #0]
 8002d36:	e002      	b.n	8002d3e <_printf_i+0xee>
 8002d38:	0641      	lsls	r1, r0, #25
 8002d3a:	d5fb      	bpl.n	8002d34 <_printf_i+0xe4>
 8002d3c:	881e      	ldrh	r6, [r3, #0]
 8002d3e:	2f6f      	cmp	r7, #111	; 0x6f
 8002d40:	bf0c      	ite	eq
 8002d42:	2308      	moveq	r3, #8
 8002d44:	230a      	movne	r3, #10
 8002d46:	4851      	ldr	r0, [pc, #324]	; (8002e8c <_printf_i+0x23c>)
 8002d48:	2100      	movs	r1, #0
 8002d4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d4e:	6865      	ldr	r5, [r4, #4]
 8002d50:	2d00      	cmp	r5, #0
 8002d52:	bfa8      	it	ge
 8002d54:	6821      	ldrge	r1, [r4, #0]
 8002d56:	60a5      	str	r5, [r4, #8]
 8002d58:	bfa4      	itt	ge
 8002d5a:	f021 0104 	bicge.w	r1, r1, #4
 8002d5e:	6021      	strge	r1, [r4, #0]
 8002d60:	b90e      	cbnz	r6, 8002d66 <_printf_i+0x116>
 8002d62:	2d00      	cmp	r5, #0
 8002d64:	d04b      	beq.n	8002dfe <_printf_i+0x1ae>
 8002d66:	4615      	mov	r5, r2
 8002d68:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d6c:	fb03 6711 	mls	r7, r3, r1, r6
 8002d70:	5dc7      	ldrb	r7, [r0, r7]
 8002d72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d76:	4637      	mov	r7, r6
 8002d78:	42bb      	cmp	r3, r7
 8002d7a:	460e      	mov	r6, r1
 8002d7c:	d9f4      	bls.n	8002d68 <_printf_i+0x118>
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d10b      	bne.n	8002d9a <_printf_i+0x14a>
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	07de      	lsls	r6, r3, #31
 8002d86:	d508      	bpl.n	8002d9a <_printf_i+0x14a>
 8002d88:	6923      	ldr	r3, [r4, #16]
 8002d8a:	6861      	ldr	r1, [r4, #4]
 8002d8c:	4299      	cmp	r1, r3
 8002d8e:	bfde      	ittt	le
 8002d90:	2330      	movle	r3, #48	; 0x30
 8002d92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002d9a:	1b52      	subs	r2, r2, r5
 8002d9c:	6122      	str	r2, [r4, #16]
 8002d9e:	464b      	mov	r3, r9
 8002da0:	4621      	mov	r1, r4
 8002da2:	4640      	mov	r0, r8
 8002da4:	f8cd a000 	str.w	sl, [sp]
 8002da8:	aa03      	add	r2, sp, #12
 8002daa:	f7ff fedf 	bl	8002b6c <_printf_common>
 8002dae:	3001      	adds	r0, #1
 8002db0:	d14a      	bne.n	8002e48 <_printf_i+0x1f8>
 8002db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002db6:	b004      	add	sp, #16
 8002db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	f043 0320 	orr.w	r3, r3, #32
 8002dc2:	6023      	str	r3, [r4, #0]
 8002dc4:	2778      	movs	r7, #120	; 0x78
 8002dc6:	4832      	ldr	r0, [pc, #200]	; (8002e90 <_printf_i+0x240>)
 8002dc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	6829      	ldr	r1, [r5, #0]
 8002dd0:	061f      	lsls	r7, r3, #24
 8002dd2:	f851 6b04 	ldr.w	r6, [r1], #4
 8002dd6:	d402      	bmi.n	8002dde <_printf_i+0x18e>
 8002dd8:	065f      	lsls	r7, r3, #25
 8002dda:	bf48      	it	mi
 8002ddc:	b2b6      	uxthmi	r6, r6
 8002dde:	07df      	lsls	r7, r3, #31
 8002de0:	bf48      	it	mi
 8002de2:	f043 0320 	orrmi.w	r3, r3, #32
 8002de6:	6029      	str	r1, [r5, #0]
 8002de8:	bf48      	it	mi
 8002dea:	6023      	strmi	r3, [r4, #0]
 8002dec:	b91e      	cbnz	r6, 8002df6 <_printf_i+0x1a6>
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	f023 0320 	bic.w	r3, r3, #32
 8002df4:	6023      	str	r3, [r4, #0]
 8002df6:	2310      	movs	r3, #16
 8002df8:	e7a6      	b.n	8002d48 <_printf_i+0xf8>
 8002dfa:	4824      	ldr	r0, [pc, #144]	; (8002e8c <_printf_i+0x23c>)
 8002dfc:	e7e4      	b.n	8002dc8 <_printf_i+0x178>
 8002dfe:	4615      	mov	r5, r2
 8002e00:	e7bd      	b.n	8002d7e <_printf_i+0x12e>
 8002e02:	682b      	ldr	r3, [r5, #0]
 8002e04:	6826      	ldr	r6, [r4, #0]
 8002e06:	1d18      	adds	r0, r3, #4
 8002e08:	6961      	ldr	r1, [r4, #20]
 8002e0a:	6028      	str	r0, [r5, #0]
 8002e0c:	0635      	lsls	r5, r6, #24
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	d501      	bpl.n	8002e16 <_printf_i+0x1c6>
 8002e12:	6019      	str	r1, [r3, #0]
 8002e14:	e002      	b.n	8002e1c <_printf_i+0x1cc>
 8002e16:	0670      	lsls	r0, r6, #25
 8002e18:	d5fb      	bpl.n	8002e12 <_printf_i+0x1c2>
 8002e1a:	8019      	strh	r1, [r3, #0]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	4615      	mov	r5, r2
 8002e20:	6123      	str	r3, [r4, #16]
 8002e22:	e7bc      	b.n	8002d9e <_printf_i+0x14e>
 8002e24:	682b      	ldr	r3, [r5, #0]
 8002e26:	2100      	movs	r1, #0
 8002e28:	1d1a      	adds	r2, r3, #4
 8002e2a:	602a      	str	r2, [r5, #0]
 8002e2c:	681d      	ldr	r5, [r3, #0]
 8002e2e:	6862      	ldr	r2, [r4, #4]
 8002e30:	4628      	mov	r0, r5
 8002e32:	f000 f859 	bl	8002ee8 <memchr>
 8002e36:	b108      	cbz	r0, 8002e3c <_printf_i+0x1ec>
 8002e38:	1b40      	subs	r0, r0, r5
 8002e3a:	6060      	str	r0, [r4, #4]
 8002e3c:	6863      	ldr	r3, [r4, #4]
 8002e3e:	6123      	str	r3, [r4, #16]
 8002e40:	2300      	movs	r3, #0
 8002e42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e46:	e7aa      	b.n	8002d9e <_printf_i+0x14e>
 8002e48:	462a      	mov	r2, r5
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	4640      	mov	r0, r8
 8002e4e:	6923      	ldr	r3, [r4, #16]
 8002e50:	47d0      	blx	sl
 8002e52:	3001      	adds	r0, #1
 8002e54:	d0ad      	beq.n	8002db2 <_printf_i+0x162>
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	079b      	lsls	r3, r3, #30
 8002e5a:	d413      	bmi.n	8002e84 <_printf_i+0x234>
 8002e5c:	68e0      	ldr	r0, [r4, #12]
 8002e5e:	9b03      	ldr	r3, [sp, #12]
 8002e60:	4298      	cmp	r0, r3
 8002e62:	bfb8      	it	lt
 8002e64:	4618      	movlt	r0, r3
 8002e66:	e7a6      	b.n	8002db6 <_printf_i+0x166>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	4632      	mov	r2, r6
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	4640      	mov	r0, r8
 8002e70:	47d0      	blx	sl
 8002e72:	3001      	adds	r0, #1
 8002e74:	d09d      	beq.n	8002db2 <_printf_i+0x162>
 8002e76:	3501      	adds	r5, #1
 8002e78:	68e3      	ldr	r3, [r4, #12]
 8002e7a:	9903      	ldr	r1, [sp, #12]
 8002e7c:	1a5b      	subs	r3, r3, r1
 8002e7e:	42ab      	cmp	r3, r5
 8002e80:	dcf2      	bgt.n	8002e68 <_printf_i+0x218>
 8002e82:	e7eb      	b.n	8002e5c <_printf_i+0x20c>
 8002e84:	2500      	movs	r5, #0
 8002e86:	f104 0619 	add.w	r6, r4, #25
 8002e8a:	e7f5      	b.n	8002e78 <_printf_i+0x228>
 8002e8c:	08002fe5 	.word	0x08002fe5
 8002e90:	08002ff6 	.word	0x08002ff6

08002e94 <memmove>:
 8002e94:	4288      	cmp	r0, r1
 8002e96:	b510      	push	{r4, lr}
 8002e98:	eb01 0402 	add.w	r4, r1, r2
 8002e9c:	d902      	bls.n	8002ea4 <memmove+0x10>
 8002e9e:	4284      	cmp	r4, r0
 8002ea0:	4623      	mov	r3, r4
 8002ea2:	d807      	bhi.n	8002eb4 <memmove+0x20>
 8002ea4:	1e43      	subs	r3, r0, #1
 8002ea6:	42a1      	cmp	r1, r4
 8002ea8:	d008      	beq.n	8002ebc <memmove+0x28>
 8002eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002eb2:	e7f8      	b.n	8002ea6 <memmove+0x12>
 8002eb4:	4601      	mov	r1, r0
 8002eb6:	4402      	add	r2, r0
 8002eb8:	428a      	cmp	r2, r1
 8002eba:	d100      	bne.n	8002ebe <memmove+0x2a>
 8002ebc:	bd10      	pop	{r4, pc}
 8002ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ec6:	e7f7      	b.n	8002eb8 <memmove+0x24>

08002ec8 <_sbrk_r>:
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	2300      	movs	r3, #0
 8002ecc:	4d05      	ldr	r5, [pc, #20]	; (8002ee4 <_sbrk_r+0x1c>)
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	602b      	str	r3, [r5, #0]
 8002ed4:	f7fd fd24 	bl	8000920 <_sbrk>
 8002ed8:	1c43      	adds	r3, r0, #1
 8002eda:	d102      	bne.n	8002ee2 <_sbrk_r+0x1a>
 8002edc:	682b      	ldr	r3, [r5, #0]
 8002ede:	b103      	cbz	r3, 8002ee2 <_sbrk_r+0x1a>
 8002ee0:	6023      	str	r3, [r4, #0]
 8002ee2:	bd38      	pop	{r3, r4, r5, pc}
 8002ee4:	2000029c 	.word	0x2000029c

08002ee8 <memchr>:
 8002ee8:	4603      	mov	r3, r0
 8002eea:	b510      	push	{r4, lr}
 8002eec:	b2c9      	uxtb	r1, r1
 8002eee:	4402      	add	r2, r0
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	d101      	bne.n	8002efa <memchr+0x12>
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	e003      	b.n	8002f02 <memchr+0x1a>
 8002efa:	7804      	ldrb	r4, [r0, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	428c      	cmp	r4, r1
 8002f00:	d1f6      	bne.n	8002ef0 <memchr+0x8>
 8002f02:	bd10      	pop	{r4, pc}

08002f04 <memcpy>:
 8002f04:	440a      	add	r2, r1
 8002f06:	4291      	cmp	r1, r2
 8002f08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002f0c:	d100      	bne.n	8002f10 <memcpy+0xc>
 8002f0e:	4770      	bx	lr
 8002f10:	b510      	push	{r4, lr}
 8002f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f16:	4291      	cmp	r1, r2
 8002f18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f1c:	d1f9      	bne.n	8002f12 <memcpy+0xe>
 8002f1e:	bd10      	pop	{r4, pc}

08002f20 <_realloc_r>:
 8002f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f24:	4680      	mov	r8, r0
 8002f26:	4614      	mov	r4, r2
 8002f28:	460e      	mov	r6, r1
 8002f2a:	b921      	cbnz	r1, 8002f36 <_realloc_r+0x16>
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f32:	f7ff bc37 	b.w	80027a4 <_malloc_r>
 8002f36:	b92a      	cbnz	r2, 8002f44 <_realloc_r+0x24>
 8002f38:	f7ff fbcc 	bl	80026d4 <_free_r>
 8002f3c:	4625      	mov	r5, r4
 8002f3e:	4628      	mov	r0, r5
 8002f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f44:	f000 f81b 	bl	8002f7e <_malloc_usable_size_r>
 8002f48:	4284      	cmp	r4, r0
 8002f4a:	4607      	mov	r7, r0
 8002f4c:	d802      	bhi.n	8002f54 <_realloc_r+0x34>
 8002f4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002f52:	d812      	bhi.n	8002f7a <_realloc_r+0x5a>
 8002f54:	4621      	mov	r1, r4
 8002f56:	4640      	mov	r0, r8
 8002f58:	f7ff fc24 	bl	80027a4 <_malloc_r>
 8002f5c:	4605      	mov	r5, r0
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d0ed      	beq.n	8002f3e <_realloc_r+0x1e>
 8002f62:	42bc      	cmp	r4, r7
 8002f64:	4622      	mov	r2, r4
 8002f66:	4631      	mov	r1, r6
 8002f68:	bf28      	it	cs
 8002f6a:	463a      	movcs	r2, r7
 8002f6c:	f7ff ffca 	bl	8002f04 <memcpy>
 8002f70:	4631      	mov	r1, r6
 8002f72:	4640      	mov	r0, r8
 8002f74:	f7ff fbae 	bl	80026d4 <_free_r>
 8002f78:	e7e1      	b.n	8002f3e <_realloc_r+0x1e>
 8002f7a:	4635      	mov	r5, r6
 8002f7c:	e7df      	b.n	8002f3e <_realloc_r+0x1e>

08002f7e <_malloc_usable_size_r>:
 8002f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f82:	1f18      	subs	r0, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bfbc      	itt	lt
 8002f88:	580b      	ldrlt	r3, [r1, r0]
 8002f8a:	18c0      	addlt	r0, r0, r3
 8002f8c:	4770      	bx	lr
	...

08002f90 <_init>:
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	bf00      	nop
 8002f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f96:	bc08      	pop	{r3}
 8002f98:	469e      	mov	lr, r3
 8002f9a:	4770      	bx	lr

08002f9c <_fini>:
 8002f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9e:	bf00      	nop
 8002fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa2:	bc08      	pop	{r3}
 8002fa4:	469e      	mov	lr, r3
 8002fa6:	4770      	bx	lr
